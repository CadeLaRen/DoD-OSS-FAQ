{"name":"DoD-OSS-FAQ","tagline":"United States Department of Defense Open Source Software FAQ","body":"Frequently Asked Questions regarding Open Source Software (OSS) and the Department of Defense (DoD)\r\n---------------------------------------------------------------------------------------------------\r\n\r\nThis page is an educational resource for government employees and\r\ngovernment contractors to understand the policies and legal issues\r\nrelating to the use of open source software (OSS) in the Department of\r\nDefense (DoD). The information on this page does not constitute legal\r\nadvice and any legal questions relating to specific situations should be\r\nreferred to legal counsel.  References to specific products or\r\norganizations are for information only, and do not constitute an\r\nendorsement of the product/company.\r\n\r\n__TOC__\r\n\r\nDefining Open Source Software (OSS)\r\n-----------------------------------\r\n\r\n### Q: What is open source software (OSS)?\r\n\r\nThe 16 October 2009 memorandum from the DoD CIO, [\"Clarifying Guidance\r\nRegarding Open Source Software\r\n(OSS)\"](http://cio-nii.defense.gov/sites/oss/2009OSS.pdf), defines OSS\r\nas \"software for which the human-readable source code is available for\r\nuse, study, re-use, modification, enhancement, and re-distribution by\r\nthe users of that software\".\r\n\r\nCareful legal review is required to determine if a given license is\r\nreally an open source software license. The following organizations\r\nexamine licenses; licenses should pass at least the first two industry\r\nreview processes, and preferably all of them, else they have a greatly\r\nheightened risk of not being an open source software license:\r\n\r\n-   Open source software licenses are reviewed and approved as\r\n    conforming to the [Open Source\r\n    Definition](http://www.opensource.org/docs/definition.php) by the\r\n    [Open Source Initiative (OSI)](http://www.opensource.org/). The OSI\r\n    publishes [a list of licenses which have successfully gone through\r\n    the approval process and comply with the Open Source\r\n    Definition](http://opensource.org/licenses).\r\n-   In practice, an open source software license must also meet the [GNU\r\n    Free Software\r\n    Definition](http://www.gnu.org/philosophy/free-sw.html); the GNU\r\n    project [publishes a list of licenses that meet the Free Software\r\n    Definition](http://www.gnu.org/licenses/license-list.html#SoftwareLicenses).\r\n-   Fedora reviews licenses and publishes a list of [\"good\" licenses\r\n    that Fedora has determined are open source software\r\n    licenses](http://fedoraproject.org/wiki/Licensing).\r\n-   [Debian-legal](http://people.debian.org/%7Ebap/dfsg-faq.html) also\r\n    examines licenses (for Debian) to determine if they meet the [Debian\r\n    social contract](http://www.debian.org/social_contract#guidelines);\r\n    the [Debian license\r\n    information](http://www.debian.org/legal/licenses/) lists licenses\r\n    that are known to pass (or not pass) these criteria.\r\n\r\nIn practice, nearly all open source software is released under one of a\r\nvery few licenses that are known to meet this definition. These licenses\r\ninclude the [MIT\r\nlicense](http://www.opensource.org/licenses/mit-license.php), [revised\r\nBSD license](http://www.opensource.org/licenses/bsd-license.php) (and\r\nits 2-clause variant), the [Apache 2.0\r\nlicense](http://www.opensource.org/licenses/apache2.0.php), the [GNU\r\nLesser General Public License\r\n(LGPL)](http://www.opensource.org/licenses/lgpl-license.php) versions\r\n2.1 or 3, and the [GNU General Public License\r\n(GPL)](http://www.opensource.org/licenses/gpl-license.php) versions 2 or\r\n3. Using a standard license simplifies collaboration and eliminates many\r\nlegal analysis costs.\r\n\r\n### Q: What are synonyms for open source software?\r\n\r\n\"Open source software\" is also called \"Free software\", \"libre software\",\r\n\"Free/open source software (FOSS or F/OSS)\", and \"Free/Libre/Open Source\r\nSoftware (FLOSS)\". The term \"Free software\" predates the term \"open\r\nsource software\", but the term \"Free software\" has sometimes been\r\nmisinterpreted as meaning \"no cost\", which is *not* the intended meaning\r\nin this context. (\"Free\" in \"Free software\" refers to freedom, not\r\nprice.) The term \"open source software\" is sometimes hyphenated as\r\n\"open-source software\".\r\n\r\nThe DoD has chosen to use the term \"open source software\" (OSS) in its\r\nofficial policy documents.\r\n\r\n### Q: What are antonyms for open source software?\r\n\r\nCommercially-available software that is *not* open source software is\r\ntypically called *proprietary* or *closed source* software.\r\n\r\n### Q: Is this related to \"open source intelligence\"?\r\n\r\nNo.  In the [Intelligence Community](https://intellipedia.intelink.gov/wiki/Intelligence_Community)\r\n(IC), the term \"open source\" typically refers to overt, publicly\r\navailable sources (as opposed to covert or classified sources).  Thus,\r\n[Open Source Intelligence](https://intellipedia.intelink.gov/wiki/Open_Source_Intelligence) (OSINT)\r\nis form of intelligence collection management that involves finding,\r\nselecting, and acquiring information from publicly available sources and\r\nanalyzing it to produce actionable intelligence.\r\n\r\nAs noted above, in software, \"Open Source\" refers to \"software for which\r\nthe human-readable source code is available for use, study, re-use,\r\nmodification, enhancement, and re-distribution by the users of that\r\nsoftware\".\r\n\r\n### Q: Is there a name for software whose source code is publicly available, but does not meet the definition of open source software?\r\n\r\nAt this time there is no widely-accepted term for software whose source\r\ncode is available for review but does not meet the definition of open\r\nsource software (due to restrictions on use, modification, or\r\nredistribution). Such software could be described as \"source available\r\nsoftware\" or \"open-box software\" (such terms might *include* open source\r\nsoftware, but could also include other software). Obviously, software\r\nthat does not meet the definition of open source software is not open\r\nsource software.\r\n\r\nOSS and DoD Policy\r\n------------------\r\n\r\n### Q: What policies address the use of open source software (OSS) in the Department of Defense?\r\n\r\nThe following policies apply:\r\n\r\n1.  The DoD CIO issued a titled [\"Clarifying Guidance Regarding Open\r\n    Source Software\r\n    (OSS)\"](http://cio-nii.defense.gov/sites/oss/2009OSS.pdf) on 16\r\n    October 2009, which superseded a memo May 2003 memo from John\r\n    Stenbit.\r\n2.  The Department of Navy CIO issued a memorandum with guidance on open\r\n    source software on 5 Jun 2007. This memorandum only applies to Navy\r\n    and Marine Corps commands, but may be a useful reference for others.\r\n    This memo is available at\r\n    <http://www.doncio.navy.mil/PolicyView.aspx?ID=312> . The Department\r\n    of the Navy has also issued [SECNAVINST\r\n    5230.15](http://www.doncio.navy.mil/PolicyView.aspx?ID=998), which\r\n    is focused on ensuring that Commercial Off The Shelf (COTS) Software\r\n    is supported throughout its fielded lifecycle. This SECNAVINST also\r\n    applies to OSS.\r\n3.  The Open Technology Development Roadmap was released by the office\r\n    of the Deputy Under Secretary of Defense for Advanced Systems and\r\n    Concepts, on 7 Jun 2006. It is available at\r\n    <http://www.acq.osd.mil/jctd/articles/OTDRoadmapFinal.pdf> .\r\n4.  The Office of Management and Budget issued a memorandum providing\r\n    guidance on software acquisition which specifically addressed open\r\n    source software on 1 Jul 2004. It may be found at\r\n    <http://www.whitehouse.gov/omb/memoranda/fy04/m04-16.html> .\r\n5.  US Army Regulation 25-2, paragraph 4-6.h, provides guidance on\r\n    software security controls that specifically addresses open source\r\n    software. This regulation only applies to the US Army, but may be a\r\n    useful reference for others. The regulation is available at\r\n    <http://www.army.mil/usapa/epubs/pdf/r25_2.pdf> .\r\n\r\nIn nearly all cases, OSS is commercial software, so the policies\r\nregarding commercial software continue to apply to OSS.\r\n\r\n\r\n\r\n### Q: Isn’t using open source software (OSS) forbidden by DoD Information Assurance (IA) Policy?\r\n\r\nNo. DoD policy requires commercial software (including OSS) to come with\r\n*either* a warranty *or* source code, so that the software can be\r\nmaintained when necessary by the supplier or the government. Since OSS\r\nprovides source code, there is no problem.\r\n\r\nThis misconception comes from a misinterpretation of DoD Instruction\r\n8500.2, “Information Assurance (IA) Implementation”, Enclosure 4,\r\ncontrol DCPD-1. The control in question reads:\r\n\r\n> DCPD-1 Public Domain Software Controls \r\n>\r\n>  Binary or machine executable public domain software products and\r\n> other software products with limited or no warranty such as those\r\n> commonly known as freeware or shareware are not used in DoD\r\n> information systems unless they are necessary for mission\r\n> accomplishment and there are no alternative IT solutions available.\r\n> Such products are assessed for information assurance impacts, and\r\n> approved for use by the DAA. The assessment addresses the fact that\r\n> such software products are difficult or impossible to review, repair,\r\n> or extend, given that the Government does not have access to the\r\n> original source code and there is no owner who could make such repairs\r\n> on behalf of the Government.\r\n\r\nThis control is intended to limit the use of certain kinds of “binary or\r\nmachine executable” software when “the Government does not have access\r\nto the original source code”. As clarified in the 2009 DoD CIO\r\nMemorandum attachment 2(2)(c), this control does not prohibit the use of\r\nopen source software, since with open source software the government\r\n*does* have access to the original source code.\r\n\r\nNote that the federal government's IA controls, as documented in [NIST\r\nSP 800-53 revision 3](http://csrc.nist.gov/publications/PubsSPs.html)\r\nincludes an equivalent control enhancement, SA-6(1) (under \"Software\r\nUsage Restrictions\"). Control enhancement SA-6(1) states that an\r\norganization must prohibit \"the use of binary or machine executable code\r\nfrom sources with limited or no warranty without accompanying source\r\ncode\". The control enhancement's guidance states that a special\r\nassessment is needed because software where there is no source code and\r\nno warranty \"are difficult or impossible to review, repair, or extend,\r\ngiven that the organization does not have access to the original source\r\ncode and there is no owner who could make such repairs on behalf of the\r\norganization.\" The [draft NIST SP 800-53 revision 4 of February\r\n2012](http://csrc.nist.gov/publications/drafts/800-53-rev4/sp800-53-rev4-ipd.pdf)\r\nmoves this text from SA-6(1) to control enhancement SI-7(15). Since the\r\ngovernment has access to the source code of OSS, by definition,\r\norganizations using this control enhancement do not need to make any\r\nspecial assessment of OSS.\r\n\r\nThe [Application Security and Development Security Technical\r\nImplementation Guide\r\n(STIG)](http://iase.disa.mil/stigs/app_security/app_sec/app_sec.html)\r\nVersion 3, Release 4 (October 28, 2011) corrects this misunderstanding\r\n(older versions *did* promulgate this misunderstanding). This version\r\nincludes these two italicized policy bullets, which specifically note\r\nthat special DAA acceptance of risk is not required when source code is\r\navailable to review, repair, and extend the software (as is true for\r\nopen source software):\r\n\r\n-   (APP2090.1: CAT II) The Program Manager will obtain DAA acceptance\r\n    of risk for all public domain, shareware, freeware, and other\r\n    software products/libraries with both (1) no source code to review,\r\n    repair, and extend, and (2) limited or no warranty, but are required\r\n    for mission accomplishment.\r\n-   (APP2090.2: CAT II) The Designer will document for DAA approval all\r\n    , public domain, shareware, freeware, and other software\r\n    products/libraries with both (1) no source code to review, repair,\r\n    and extend, and (2) limited or no warranty, but are required for\r\n    mission accomplishment.\r\n\r\nGeneral information about OSS\r\n-----------------------------\r\n\r\n### Q: Is open source software commercial software? Is it COTS?\r\n\r\nNearly all OSS is commercial software, and if it used unchanged (or with\r\nonly minor changes), it is almost always COTS.\r\n\r\nOpen source software that has at least one non-governmental use, and is\r\nlicensed to the public, is commercial software. If it is already\r\navailable to the public and is used unchanged, it is usually COTS.\r\n\r\nU.S. law governing federal procurement\r\n[U.S. Code Title 41, Chapter 7, Section 403](http://www.law.cornell.edu/uscode/41/usc_sec_41_00000403----000-.html) defines \"commercial item\"\r\nas including \"Any item, other than real property, that is of a type\r\ncustomarily used by the general public or by non-governmental entities\r\nfor purposes other than governmental purposes (i.e., it has some\r\nnon-government use), and (i) Has been sold, leased, or **licensed** to\r\nthe general public; or (ii) Has been offered for sale, lease, or license\r\nto the general public ...\". Thus, as long as the software has at least\r\none non-governmental use, software licensed (or offered for license) to\r\nthe public is a commercial item for procurement purposes.\r\n\r\nSimilarly,\r\n[U.S. Code Title 41, Chapter 7, Section 431](http://www.law.cornell.edu/uscode/uscode41/usc_sec_41_00000431----000-.html) defines the term\r\n\"Commercially available off-the-shelf (COTS) item\"; software is COTS if\r\nit is (a) a \"commercial item\", (b) sold in substantial quantities in the\r\ncommercial marketplace, and (c) is offered to the Government, without\r\nmodification, in the same form in which it is sold in the commercial\r\nmarketplace. Thus, OSS available to the public and used unchanged is\r\nnormally COTS.\r\n\r\nThese definitions in U.S. law govern U.S. acquisition regulations,\r\nnamely the [Federal Acquisition Regulation\r\n(FAR)](http://www.acquisition.gov/far/) and the [Defense Federal\r\nAcquisition Regulation Supplement\r\n(DFARS)](http://www.acq.osd.mil/dpap/dars/dfarspgi/current/index.html).\r\n[DFARS 252.227-7014 Rights in Noncommercial Computer Software and\r\nNoncommercial Computer Software\r\nDocumentation](http://www.acq.osd.mil/dpap/dars/dfars/html/current/252227.htm)\r\ndefines \"Commercial computer software\" as \"software developed or\r\nregularly used for non-governmental purposes which: (i) Has been sold,\r\nleased, or licensed to the public; (ii) Has been offered for sale,\r\nlease, or license to the public; (iii) Has not been offered, sold,\r\nleased, or licensed to the public but will be available for commercial\r\nsale, lease, or license in time to satisfy the delivery requirements of\r\nthis contract; or (iv) Satisfies a criterion expressed in paragraph\r\n(a)(1)(i), (ii), or (iii) of this clause and would require only minor\r\nmodification to meet the requirements of this contract.\"\r\n\r\nThere are many other reasons to believe nearly all OSS is commercial\r\nsoftware:\r\n\r\n-   OSS is increasingly commercially developed and supported.\r\n-   OSS projects typically seek financial gain in the form of\r\n    improvements.\r\n    [U.S. Code Title 17, section 101](http://www.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00000101----000-.html) (part of copyright law) explicitly\r\n    defines the term “financial gain” as including “receipt, or\r\n    expectation of receipt, of anything of value, including the receipt\r\n    of other copyrighted works.”\r\n-   OSS licenses and projects clearly approve of commercial support\r\n\r\nThis is confirmed by \"Clarifying Guidance Regarding Open Source Software\r\n(OSS)\" (2009) and the Department of the Navy \"Open Source Software\r\nGuidance\" (signed June 5, 2007). For more discussion on this topic, see\r\nthe article [Open Source Software Is\r\nCommercial](http://journal.thedacs.com/issue/56/151).\r\n\r\nBy definition, software that does not meet the U.S. government's\r\ndefinition of \"commercial software\" is not considered commercial\r\nsoftware by the U.S. government's acquisition processes. For example,\r\nsoftware that is released to the public as OSS is not considered\r\ncommercial if it is a type of software is *only* used for governmental\r\npurposes. In contracts where this issue is important, you should examine\r\nthe contract to find the specific definition of \"commercial software\"\r\nthat is being used. But in practice, publicly-released OSS nearly always\r\nmeets the various government definitions for \"commercial software\" --\r\nand thus is nearly always considered commercial software.\r\n\r\n### Q: Why is it important to understand that open source software is commercial software?\r\n\r\nIt is important to understand that open source software is commercial\r\nsoftware, because there are many laws, regulations, policies, and so on\r\nregarding commercial software. Failing to understand that open source\r\nsoftware is commercial software would result in failing to follow the\r\nlaws, regulations, policies, and so on regarding commercial software.\r\n\r\nIn particular, U.S. law\r\n([10 USC 2377](http://www.law.cornell.edu/uscode/uscode10/usc_sec_10_00002377----000-.html)) requires a preference for commercial items for procurement\r\nof supplies or services. 10 USC 2377 requires that the head of an agency\r\nshall ensure that procurement officials in that agency, to the maximum\r\nextent practicable:\r\n\r\n1.  \"acquire commercial items or nondevelopmental items other than\r\n    commercial items to meet the needs of the agency;\r\n2.  require prime contractors and subcontractors at all levels under the\r\n    agency contracts to incorporate commercial items or nondevelopmental\r\n    items other than commercial items as components of items supplied to\r\n    the agency;\r\n3.  modify requirements in appropriate cases to ensure that the\r\n    requirements can be met by commercial items or, to the extent that\r\n    commercial items suitable to meet the agency’s needs are not\r\n    available, nondevelopmental items other than commercial items;\r\n4.  state specifications in terms that enable and encourage bidders and\r\n    offerors to supply commercial items or, to the extent that\r\n    commercial items suitable to meet the agency’s needs are not\r\n    available, nondevelopmental items other than commercial items in\r\n    response to the agency solicitations;\r\n5.  revise the agency’s procurement policies, practices, and procedures\r\n    not required by law to reduce any impediments in those policies,\r\n    practices, and procedures to the acquisition of commercial items;\r\n    and\r\n6.  require training of appropriate personnel in the acquisition of\r\n    commercial items.\"\r\n\r\nSimilarly, it requires preliminary market research to determine \"whether\r\nthere are commercial items or, to the extent that commercial items\r\nsuitable to meet the agency’s needs are not available, nondevelopmental\r\nitems other than commercial items available\" that \"(A) meet the agency’s\r\nrequirements; (B) could be modified to meet the agency’s requirements;\r\nor (C) could meet the agency’s requirements if those requirements were\r\nmodified to a reasonable extent.\" This market research should occur\r\n\"before developing new specifications for a procurement by that agency;\r\nand before soliciting bids or proposals for a contract in excess of the\r\nsimplified acquisition threshold.\"\r\n\r\nAn agency that failed to consider open source software, and instead only\r\nconsidered proprietary software, would fail to comply with these laws,\r\nbecause it would unjustifiably exclude a significant part of the\r\ncommercial market. This is particularly the case where future\r\nmodifications by the U.S. government may be necessary, since OSS by\r\ndefinition permits modification.\r\n\r\n### Q: Are \"non-commercial software\", \"freeware\", or \"shareware\" the same thing as open source software?\r\n\r\nNo.\r\n\r\nDo not mistakenly use the term \"non-commercial software\" as a synonym\r\nfor \"open source software\". As noted above, in nearly all cases, open\r\nsource software is considered \"commercial software\" by U.S. law, the\r\nFAR, and the DFARS.\r\n[DFARS 252.227-7014](http://www.law.cornell.edu/uscode/28/usc_sec_28_00001498----000-.html) specifically defines \"commercial computer software\"\r\nin a way that includes nearly all OSS, and defines \"noncommercial\r\ncomputer software” as software that does *not* qualify as \"commercial\r\ncomputer software\". In addition, important open source software is\r\ntypically supported by one or more commercial firms.\r\n\r\nAlso, do not use the terms \"freeware\" or \"shareware\" as a synonym for\r\n\"open source software\". DoD Instruction 8500.2, “Information Assurance\r\n(IA) Implementation”, Enclosure 4, control DCPD-1, states that these\r\nterms apply to software where \"the Government does not have access to\r\nthe original source code\".  The government ''does ''have access to the\r\noriginal source code of open source software, so by definition OSS is\r\nnot \"freeware\" or \"shareware\".\r\n\r\n### Q: How is OSS typically developed?\r\n\r\nOSS is typically developed through a collaborative process.\r\n\r\nMost OSS projects have a “trusted repository”, that is, some (web)\r\nlocation where people can get the “official” version of the program, as\r\nwell as related information (documentation, bug report system, mailing\r\nlists, etc.). Users can get their software directly from the trusted\r\nrepository, or get it through distributors who acquire it (and provide\r\nadditional value such as integration with other components, testing,\r\nspecial configuration, support, and so on).\r\n\r\nOnly some developers are allowed to modify the trusted repository\r\ndirectly: the trusted developers. At project start, the project creators\r\n(who create the initial trusted repository) are the trusted developers,\r\nand they determine who else may become a trusted developer of this\r\ninitial trusted repository. All other developers can make changes to\r\ntheir local copies, and even post their versions to the Internet (a\r\nprocess made especially easy by distributed software configuration\r\nmanagement tools), but they must submit their changes to a trusted\r\ndeveloper to get their changes into the trusted repository.\r\n\r\nUsers can send bug reports to the distributor or trusted repository,\r\njust as they could for a proprietary program. But what is radically\r\ndifferent is that a user can actually make a change to the program\r\nitself (either directly, or by hiring someone to do it). Since users\r\nwill want to use the improvements made by others, they have a strong\r\nfinancial incentive to submit their improvements to the trusted\r\nrepository. That way, their improvements will be merged with the\r\nimprovements of others, enabling them to use all improvements instead of\r\nonly their own.\r\n\r\nThis can create an avalanche-like “virtuous cycle”. As the program\r\nbecomes more capable, more users are attracted to using it. A very small\r\npercentage of such users determine that they can make a change valuable\r\nto them, and contribute it back (to avoid maintenance costs). As more\r\nimprovements are made, more people can use the product, creating more\r\npotential users as developers - like a snowball that gains mass as it\r\nrolls downhill.\r\n\r\nThis enables cost-sharing between users, as with proprietary development\r\nmodels.  However, this cost-sharing is done in a rather different way\r\nthan in proprietary development.  In particular, note that the costs\r\nborne by a particular organization are typically only those for whatever\r\nimprovements or services are used (e.g., installation, configuration,\r\nhelp desk, etc.). In contrast, typical proprietary software costs are\r\nper-seat, not per-improvement or service. However, it must be noted that\r\nthe OSS model is much more reflective of the actual costs borne by\r\ndevelopment organizations. It costs essentially nothing to send a file\r\nor burn a CD-ROM of software; once it exists, all software costs are due\r\nto maintenance and support of software. In short, OSS more accurately\r\nreflects the economics of software development; some speculate that this\r\nis one reason why OSS has become so common so quickly.\r\n\r\n![OSS Development Model](Oss-development-model.png \"image\")\r\n\r\n### Q: Isn't OSS developed primarily by inexperienced students?\r\n\r\nNo, OSS is developed by a wide variety of software developers, and the\r\naverage developer is quite experienced. A [Boston Consulting\r\nGroup](http://freesoftware.mit.edu/papers/lakhaniwolf.pdf) study found\r\nthat the average age of OSS developers was 30 years old, the majority\r\nhad training in information technology and/or computer science, and on\r\naverage had 11.8 years of computer programming experience.\r\n\r\n### Q: Is open source software the same as \"open systems/open standards\"?\r\n\r\nNo, although they work well together, and both are strategies for\r\nreducing [\"vendor lock-in\"](http://www.linfo.org/vendor_lockin.html).\r\nVendor lock-in, aka lock-in, is the situation in which customers are\r\ndependent on a single supplier for some product (i.e., a good or\r\nservice), or products, and cannot move to another vendor without\r\nsubstantial costs and/or inconvenience. Lock-in tends to raise costs\r\nsubstantially, reduces long-term value (including functionality,\r\ninnovation, and reliability), and can become a serious security problem\r\n(since the supplier has little incentive to provide a secure product and\r\nto quickly fix problems found later).\r\n An \"Open System\" is a \"system that employs modular design, uses widely\r\nsupported and consensus based standards for its key interfaces, and has\r\nbeen subjected to successful V&V tests to ensure the openness of its key\r\ninterfaces\" (per the DoD OSJTF). Thus, open systems require standards\r\nthat are widely-supported and consensus-based; standards that meet these\r\n(and possibly some additional conditions) may be termed \"open\r\nstandards\". Open systems and open standards counter dependency on a\r\nsingle supplier, though only if there is a competing marketplace of\r\nreplaceable components. Indeed, according to\r\n[Walli](http://www.usenix.org/events/usenix05/tech/slides/walli.pdf),\r\n\"Standards exist to encourage & enable multiple implementations\". Many\r\ngovernments, not just the U.S., view open systems as critically\r\nnecessary. DoD Directive 5000.1 states that open systems “shall be\r\nemployed, where feasible”, and the European Commission identifies open\r\nstandards as a major policy thrust.\r\n\r\nThere are many definitions for the term \"open standard\". Fundamentally,\r\na standard is a specification, so an \"open standard\" is a specification\r\nthat is \"open\". Public definitions include those of the [European\r\nInteroperability Framework\r\n(EIF)](http://europa.eu.int/idabc/en/document/3761), the [Digistan\r\ndefinition of open\r\nstandard](http://www.digistan.org/open-standard:definition) (based on\r\nthe EIF), and [Bruce Perens’ “Open Standards: Principles and\r\nPractice”](http://perens.com/OpenStandards/Definition.html).\r\n\r\nIn the DoD, the [DISRonline](https://disronline.disa.mil/) is a useful\r\nresource for identifying recommended standards (which tend to be open\r\nstandards). DISRonline is a collection of web-based applications\r\nsupporting the continuing evolution of the Department of Defense (DoD)\r\nInformation Technology Standards Registry (DISR). [DAU has some\r\ninformation about\r\nDISRonline](https://acc.dau.mil/CommunityBrowser.aspx?id=25809). The\r\n[Open Systems Joint Task Force (OSJTF) web\r\npage](http://www.acq.osd.mil/osjtf/) also provides some useful\r\nbackground.\r\n\r\nIncreasingly, many DoD capabilities are accessible via web browsers\r\nusing open standards such as TCP/IP, HTTP, HTML, and CSS; in such cases,\r\nit is relatively easy to use or switch to open source software\r\nimplementations (since the platforms used to implement the client or\r\nserver become less relevant).  As noted by the OSJTF definition for open\r\nsystems, be sure to test such systems with more than one web browser\r\n(e.g., Internet Explorer and Firefox), to reduce the risk of vendor\r\nlock-in.\r\n\r\n### Q: How does open source software work with open systems/open standards?\r\n\r\nOpen standards can aid open source software projects:\r\n\r\n-   Open standards make it easier for users to (later) adopt an open\r\n    source software program, because users of open standards aren’t\r\n    locked into a particular implementation. Instead, users who are\r\n    careful to use open standards can easily switch to a different\r\n    implementation, including an OSS implementation.\r\n-   Open standards also make it easier for OSS developers to create\r\n    their projects, because the standard itself helps developers know\r\n    what to do. Creating any interface is an effort, and having a\r\n    pre-defined standard helps reduce that effort greatly.\r\n\r\nNote that open standards aid proprietary software in exactly the same\r\nway.\r\n\r\nOSS aids open standards, too:\r\n\r\n-   OSS implementations can help create and keep open standards open. An\r\n    OSS implementation can be read and modified by anyone; such\r\n    implementations can quickly become a working reference model (a\r\n    \"sample implementation\" or an \"executable specification\") that\r\n    demonstrates what the specification means (clarifying the\r\n    specification) and demonstrating how to actually implement it.\r\n    Perhaps more importantly, by forcing there to be an implementation\r\n    that others can examine in detail, resulting in better\r\n    specifications that are more likely to be used.\r\n-   OSS implementations can help rapidly increase adoption/use of the\r\n    open standard. OSS programs can typically be simply downloaded and\r\n    tried out, making it much easier for people to try it out and\r\n    encouraging widespread use. This also pressures proprietary\r\n    implementations to limit their prices, and such lower prices for\r\n    proprietary software also encourages use of the standard.\r\n\r\nWith practically no exceptions, successful open standards have OSS\r\nimplementations.\r\n\r\nSo, while open systems/open standards are different from open source\r\nsoftware, they are complementary and can work well together.\r\n\r\n### Q: How does open source software relate to the Buy America Act?\r\n\r\nAs noted by the 16 October 2009 policy memorandum from the DoD CIO, in\r\nalmost all cases OSS is a commercial item as defined by US Law (Title\r\n41) and regulation (the FAR).\r\n\r\nThe Buy America Act does not apply to information technology that is a\r\ncommercial item, so there is usually no problem for OSS. As stated in\r\nFAR 25.103 Exceptions item (e), \"The restriction on purchasing foreign\r\nend products does not apply to the acquisition of information technology\r\nthat is a commercial item, when using fiscal year 2004 or subsequent\r\nfiscal year funds (Section 535(a) of Division F, Title V, Consolidated\r\nAppropriations Act, 2004, and similar sections in subsequent\r\nappropriations acts).\"\r\n\r\nOSS Licenses\r\n------------\r\n\r\n### Q: What is the legal basis of OSS licenses?\r\n\r\nSoftware licenses, including those for open source software, are\r\ntypically based on copyright law. Under U.S. copyright law, users must\r\nhave permission (i.e. a license) from the copyright holder(s) before\r\nthey can obtain a copy of software to run on their system(s). Authors of\r\na creative work, or their employer, normally receive the copyright once\r\nthe work is in a fixed form (e.g., written/typed).  Others can obtain\r\npermission to use a copyrighted work by obtaining a license from the\r\ncopyright holder.  Typically, obtaining rights granted by the license\r\ncan only be obtained when the requestor agrees to certain conditions.\r\nFor example, users of proprietary software must typically pay for a\r\nlicense to use a copy or copies. Open source software licenses grant\r\nmore rights than proprietary software licenses, but they are still\r\nconditional licenses that require the user to obey certain terms.\r\n\r\nSoftware licenses (including OSS licenses) may also involve the laws for\r\npatent, trademark, and trade secrets, in addition to copyright. \r\n\r\nExport control laws are often not specifically noted in OSS licenses,\r\nbut nevertheless these laws also govern when and how software may be\r\nreleased.\r\n\r\n### Q: Are OSS licenses legally enforceable?\r\n\r\nYes, in general. For advice about a *specific* situation, however,\r\nconsult with legal counsel.\r\n\r\nThe [U.S. Court of Appeals for the Federal Circuit's 2008 ruling on\r\nJacobsen v. Katzer](http://www.cafc.uscourts.gov/opinions/08-1001.pdf)\r\nmade it clear that OSS licenses are enforceable, even if money is not\r\nexchanged.  It noted that a copyright holder may dedicate a \"certain\r\nwork to free public use and yet enforce an 'open source' copyright\r\nlicense to control the future distribution and modification of that\r\nwork... Open source licensing has become a widely used method of\r\ncreative collaboration that serves to advance the arts and sciences in a\r\nmanner and at a pace that few could have imagined just a few decades\r\nago... Traditionally, copyright owners sold their copyrighted material\r\nin exchange for money. The lack of money changing hands in open source\r\nlicensing should not be presumed to mean that there is no economic\r\nconsideration, however. There are substantial benefits, including\r\neconomic benefits, to the creation and distribution of copyrighted works\r\nunder public licenses that range far beyond traditional license\r\nroyalties... The choice to exact consideration in the form of compliance\r\nwith the open source requirements of disclosure and explanation of\r\nchanges, rather than as a dollar-denominated fee, is entitled to no less\r\nlegal recognition. Indeed, because a calculation of damages is\r\ninherently speculative, these types of license restrictions might well\r\nbe rendered meaningless absent the ability to enforce through injunctive\r\nrelief.\" In short, it determined that the OSS license at issue in the\r\ncase (the Artistic license) was indeed an enforceable license.\r\n\r\n[\"Enforcing the GNU GPL\" by Eben\r\nMoglen](http://www.gnu.org/philosophy/enforcing-gpl.html) is a brief\r\nessay that argues why the GNU General Public License (GPL),\r\nspecifically, is enforceable. U.S. courts have determined that the GPL\r\ndoes not violate anti-trust laws. In [Wallace vs.\r\nFSF](http://sco.tuxrocks.com/Docs/Wallace_v_FSF/Wallace_v_FSF-41.pdf),\r\nJudge Daniel Tinder stated that \"the GPL encourages, rather than\r\ndiscourages, free competition and the distribution of computer operating\r\nsystems...\" and found no anti-trust issues with the GPL. Similarly, in\r\n[Wallace v. IBM, Red Hat, and\r\nNovell](http://www.internetcases.com/library/cases/2006-11-09_wallace_v_ibm.pdf),\r\nthe U.S. Court of Appeals for the Seventh Circuit found in November 2006\r\nthat the GNU General Public License (GPL) \"and open-source software have\r\nnothing to fear from the antitrust laws\". [German courts have enforced\r\nthe\r\nGPL](http://www.wilmerhale.com/publications/whPubsDetail.aspx?publication=346).\r\n\r\n### Q: What are the major types of open source software licenses?\r\n\r\nOSS licenses can be grouped into three main categories: Permissive,\r\nstrongly protective, and weakly protective. Here is an explanation of\r\nthese categories, along with common licenses used in each category (see\r\n[The Free-Libre / Open Source Software (FLOSS) License\r\nSlide](http://www.dwheeler.com/essays/floss-license-slide.html)):\r\n\r\n-   Permissive: These licenses permit the software to become proprietary\r\n    (i.e., not OSS). This includes the [MIT\r\n    license](http://www.opensource.org/licenses/mit-license.php) and the\r\n    [revised BSD\r\n    license](http://www.opensource.org/licenses/bsd-license.php). The\r\n    [Apache 2.0\r\n    license](http://www.opensource.org/licenses/apache2.0.php) is also a\r\n    popular license in this category; note that the Apache 2.0 license\r\n    is compatible with GPL version 3, but not with GPL version 2.\r\n-   Strongly Protective (aka strong copyleft): These licenses prevent\r\n    the software from becoming proprietary, and instead enforce a \"share\r\n    and share alike\" approach. In such licenses, if you give someone a\r\n    binary of the program, you are obligated to give them the source\r\n    code (perhaps upon request) under the same terms.  This includes the\r\n    most popular OSS license, the [GNU General Public License\r\n    (GPL)](http://www.opensource.org/licenses/gpl-license.php). There\r\n    are two versions of the GPL in common use today: the older version\r\n    2, and the newer version 3.\r\n-   Weakly Protective (aka weak copyleft): These licenses are a\r\n    compromise between permissive and strongly protective licenses.\r\n    These prevent the software component (often a software library) from\r\n    becoming proprietary, yet permit it to be part of a larger\r\n    proprietary program. The [GNU Lesser General Public License\r\n    (LGPL)](http://www.opensource.org/licenses/lgpl-license.php) is the\r\n    most popular such license, and there are two versions in common use:\r\n    the older version 2.1 and newer version 3. An alternative approach\r\n    is to use the GPL plus a [GPL linking exception term (such as the\r\n    \"Classpath\r\n    exception\")](http://en.wikipedia.org/wiki/GPL_linking_exception).\r\n\r\n### Q: How can you determine if different open source software licenses are compatible?\r\n\r\nIn general, legal analysis is required to determine if multiple\r\nprograms, covered by different OSS licenses, can be legally combined\r\ninto a single larger work. This legal analysis must determine if it is\r\npossible to meet the conditions of all relevant licenses simultaneously.\r\nIf it is possible to meet the conditions of all relevant licenses\r\nsimultaneously, then those licenses are *compatible*.\r\n\r\nThankfully, such analyses has already been performed on the common OSS\r\nlicenses, which tend to be mutually compatible. Many analyses focus on\r\nversions of the GNU General Public License (GPL), since this is the most\r\ncommon OSS license, but analyses for other licenses are also available.\r\nResources for further information include:\r\n\r\n-   [GPL FAQ](http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility)\r\n    (Focuses on compatibility between versions of the GPL and LGPL)\r\n-   [The Free-Libre / Open Source Software (FLOSS) License\r\n    Slide](http://www.dwheeler.com/essays/floss-license-slide.html)\r\n-   [Various Licenses and Comments about\r\n    Them](http://www.gnu.org/licenses/license-list.html)\r\n-   [Maintaining Permissive-Licensed Files in a GPL-Licensed Project:\r\n    Guidelines for Developers (Software Freedom Law\r\n    Center)](http://www.softwarefreedom.org/resources/2007/gpl-non-gpl-collaboration.html)\r\n-   [Fedora Licensing](http://fedoraproject.org/wiki/Licensing)\r\n\r\nIn brief, the MIT and 2-clause BSD license are dominated by the 3-clause\r\nBSD license, which are all dominated by the LGPL licenses, which are all\r\ndominated by the GPL licenses.  By \"dominate\", that means that when\r\nsoftware is merged which have those pairs of licenses, the dominating\r\nlicense essentially governs the resulting combination because the\r\ndominating license essentially includes all the key terms of the other\r\nlicense.  This also means that these particular licenses are compatible.\r\nThe Apache 2.0 license is compatible with the GPL version 3 license, but\r\nnot the GPL version 2 license.  The GPL version 2 and the GPL version 3\r\nare in principle incompatible with each other, but in practice, most\r\nreleased OSS states that it is \"GPL version 2 or later\" or \"GPL version\r\n3 or later\"; in these cases, version 3 is a common license and thus such\r\nsoftware is compatible.\r\n\r\nNote that this sometimes depends on how the program is used or modified.\r\nFor example, the LGPL permits the covered software (usually a library)\r\nto be embedded in a larger work under many different licenses (including\r\nproprietary licenses), subject to certain conditions. However, if the\r\ncovered software/library is *itself* modified, then additional\r\nconditions are imposed.\r\n\r\nThis need for legal analysis is one reason why creating new OSS licenses\r\nis strongly discouraged: It can be extremely difficult, costly, and\r\ntime-consuming to analyze the interplay of many different licenses. It\r\nis usually far better to stick to licenses that have already gone\r\nthrough legal review and are widely used in the commercial world.\r\n\r\n### Q: Can OSS licenses and approaches be used for material other than software?\r\n\r\nYes. The [Creative Commons](http://creativecommons.org/) is a non-profit\r\norganization that provides free tools, including a set of licenses, to\r\n\"let authors, scientists, artists, and educators easily mark their\r\ncreative work with the freedoms they want it to carry\".  A copyright\r\nholder who releases creative works under one of the Creative Common\r\nlicenses that permit commercial use and modifications would be using an\r\nOSS-like approach for such works. \r\n[Wikipedia](http://www.wikipedia.org/) maintains an encyclopedia using\r\napproaches similar to open source software approaches. Note that\r\n[Creative Commons does not recommend that you use one of their licenses\r\nfor\r\nsoftware](http://wiki.creativecommons.org/FAQ#Can_I_use_a_Creative_Commons_license_for_software.3F);\r\nthey encourage using one of the existing OSS licenses which \"were\r\ndesigned specifically for use with software\".\r\n\r\nComputer and electronic hardware that is designed in the same fashion as\r\nopen source software (OSS) is sometimes termed [open source\r\nhardware](http://en.wikipedia.org/wiki/Open_hardware). The term has\r\nprimarily been used to reflect the free release of information about the\r\nhardware design, such as schematics, bill of materials and PCB layout\r\ndata, or its representation in a hardware description language (HDL),\r\noften with the use of open source software to drive the hardware.\r\n\r\nSoftware/hardware for which the implementation, proofs of its\r\nproperties, and all required tools are released under an OSS license are\r\ntermed [open proofs](http://www.openproofs.org/)(see the [open proofs\r\nwebsite for more information](http://www.openproofs.org/)).\r\n\r\nWhere it is unclear, make it clear what the \"source\" or \"source code\"\r\nmeans.\r\n\r\n(See [GPL FAQ, \"Can I use the GPL for something other than\r\nsoftware?\"](http://www.gnu.org/licenses/gpl-faq.html#GPLOtherThanSoftware).)\r\n\r\n\r\n\r\n### Q: Is it more difficult to comply with OSS licenses than proprietary licenses?\r\n\r\nNo, complying with OSS licenses is much easier than proprietary licenses\r\nif you only use the software in the same way that proprietary software\r\nis normally used.  By definition, OSS software permits arbitrary use of\r\nthe software, and allows users to re-distribute the software to others. \r\nThe terms that apply to usage and redistribution tend to be trivially\r\neasy to meet (e.g., you must not remove the license or author credits\r\nwhen re-distributing the software).  Thus, complex license management\r\nprocesses to track every installation or use of the software, or who is\r\npermitted to use the software, is completely unnecessary.  Support for\r\nOSS is often sold separately for OSS; in such cases, you must comply\r\nwith the support terms for those uses to receive support, but these are\r\ntypically the same kinds of terms that apply to proprietary software\r\n(and they tend to be simpler in practice).\r\n\r\nIt is only when the OSS is modified that additional OSS terms come into\r\nplay, depending on the OSS license.  Since it is typically not legal to\r\nmodify proprietary software at all, or it is legal only in very limited\r\nways, it is trivial to determine when these additional terms may apply. \r\nThe real challenge is one of education - some developers incorrectly\r\nbelieve that just because something is free to download, it can be\r\nmerged or changed without restriction.  This has never been true, and\r\nexplaining this takes little time.\r\n\r\n### Q: Who can enforce OSS licenses?\r\n\r\nTypically enforcement actions are based on copyright violations, and\r\nonly copyright holders can raise a copyright claim in U.S. court. In the\r\ncommercial world, the copyright holders are typically the individuals\r\nand organizations that originally developed the software. Under the\r\ncurrent DoD contracting regime, the contractor usually retains the\r\ncopyright for software developed with government funding, so in such\r\ncases the contractor (not the government) has the right to sue for\r\ncopyright violation. In some cases, the government obtains the\r\ncopyright; in those cases, the government can sue for copyright\r\nviolation.\r\n\r\nHowever, the government can release software as OSS when it has\r\nunlimited rights to that software. The government is not the copyright\r\nholder in such cases, but the government can still enforce its rights.\r\nAlthough the government cannot directly sue for copyright violation, in\r\nsuch cases it can still sue for breach of license and, presumably, get\r\ninjunctive relief to stop the breach and money damages to recover\r\nroyalties obtained by breaching the license (and perhaps other damages\r\nas well).\r\n\r\nIn addition, a third party who breaches a software license (including\r\nfor OSS) granted by the government risks losing rights they would\r\nnormally have due to the \"doctrine of unclean hands\". The [doctrine of\r\nunclean hands](http://dictionary.law.com/definition.asp?selected=2182),\r\nper law.com, is \"a legal doctrine which is a defense to a complaint,\r\nwhich states that a party who is asking for a judgment cannot have the\r\nhelp of the court if he/she has done anything unethical in relation to\r\nthe subject of the lawsuit. Thus, if a defendant can show the plaintiff\r\nhad 'unclean hands,' the plaintiff's complaint will be dismissed or the\r\nplaintiff will be denied judgment.\" So if the government releases\r\nsoftware as OSS, and a malicious developer performs actions in violation\r\nof that license, then the government's courts might choose to not\r\nenforce any of that malicious developer's intellectual rights to that\r\nresult. In effect, the malicious developer could lose many or all rights\r\nover their license-violating result, even rights they would normally\r\nhave had! Since OSS licenses are quite generous, the only\r\nlicense-violating actions a developer is likely to try is to release\r\nsoftware under a more stringent license... and those will have little\r\neffect if they cannot be enforced in court.\r\n\r\nSee [GPL FAQ, \"Who has the power to enforce the\r\nGPL?\"](http://www.gnu.org/licenses/gpl-faq.html#WhoHasThePower).\r\n\r\n### Q: Do choice of venue clauses automatically disqualify OSS licences?\r\n\r\nNo. A \"choice of venue\" clause is a clause that states where a dispute\r\nis to be resolved (e.g., which court). Many OSS licenses do not have a\r\nchoice of venue clause, and thus cannot have an issue.\r\n\r\nIf your contract has FAR clause 52.212-4 (which it is normally required\r\nto do), then choice of venue clauses in software licenses are\r\nundesirable, but the order of precedence clause (in the contract) means\r\nthat the choice of venue clause (in the license) is superseded by the\r\nContract Disputes Act. Thus, in many cases a \"choice of venue\" clause is\r\nnot an insurmountable barrier to acceptance of the software delivery by\r\nthe government.\r\n\r\nFor software delivered under federal contracts, any \"choice of venue\"\r\nclauses in the license generally conflict with the Contract Disputes\r\nAct. However, the required FAR Clause 52.212-4(d) establishes that \"This\r\ncontract is subject to the Contract Disputes Act of 1978, as amended (41\r\nU.S.C. 601-613).\" Furthermore, 52.212-4(s) says: \"(s) Order of\r\nprecedence. Any inconsistencies in this solicitation or contract shall\r\nbe resolved by giving precedence in the following order: (1) the\r\nschedule of supplies/services; (2) the Assignments, Disputes, Payments,\r\nInvoice, Other Compliances, and Compliance with Laws Unique to\r\nGovernment Contracts paragraphs of this clause; (3) the clause at\r\n52.212-5; (4) addenda to this solicitation or contract, including any\r\nlicense agreements for computer software; ...\"\r\n\r\nThis clause establishes that the choice of venue clause (category 4) is\r\nsuperseded by the Contract Disputes Act (category 2), and thus the\r\nconflict is typically moot. Government lawyers and Contracting Officers\r\nare trained to try to negotiate licenses which resolve these ambiguities\r\nwithout having to rely on the less-satisfying \"Order of Precedence\", but\r\ngenerally accede when licenses in question are non-negotiable, such as\r\nwith OSS licenses in many cases. As always, if there are questions,\r\nconsult your attorney to discuss your specific situation.\r\n\r\nOSS and Security/Software Assurance/System Assurance/Supply Chain Risk Management\r\n---------------------------------------------------------------------------------\r\n\r\n### Q: Does the DoD use OSS for security functions?\r\n\r\nYes. The [2003 MITRE study, \"Use of Free and Open Source Software (FOSS)\r\nin the U.S. Department of\r\nDefense\"](http://cio-nii.defense.gov/sites/oss/2003Survey/dodfoss_pdf.pdf),\r\nfor analysis purposes, posed the hypothetical question of what would\r\nhappen if OSS software were banned in the DoD, and found that OSS \"plays\r\na far more critical role in the DoD than has been generally\r\nrecognized... (especially in) Infrastructure Support, Software\r\nDevelopment, Security, and Research\". In particular, it found that DoD\r\nsecurity \"depends on (OSS) applications and strategies\", and that a\r\nhypothetic ban \"would have immediate, broad, and in some cases strongly\r\nnegative impacts on the ability of the DoD to analyze and protect its\r\nown networks against hostile intrusion. This is in part because such a\r\nban would prevent DoD groups from using the same analysis and network\r\nintrusion applications that hostile groups could use to stage\r\ncyberattacks. It would also remove the uniquely (OSS) ability to change\r\ninfrastructure source code rapidly in response to new modes of\r\ncyberattack\".\r\n\r\n### Q: Doesn't hiding source code automatically make software more secure?\r\n\r\nNo. Indeed, vulnerability databases such as CVE make it clear that\r\nmerely hiding source code does not counter attacks:\r\n\r\n-   Dynamic attacks (e.g., generating input patterns to probe for\r\n    vulnerabilities and then sending that data to the program to\r\n    execute) don’t need source or binary. Observing the output from\r\n    inputs is often sufficient for attack.\r\n-   Static attacks (e.g., analyzing the code instead of its execution)\r\n    can use pattern-matches against binaries - source code is not needed\r\n    for them either.\r\n-   Even if source code is necessary (e.g., for source code analyzers),\r\n    adequate source code can often be regenerated by disassemblers and\r\n    decompilers sufficiently to search for vulnerabilities. Such source\r\n    code may not be adequate to cost-effectively *maintain* the\r\n    software, but attackers need not maintain software.\r\n-   Even when the original source is necessary for in-depth analysis,\r\n    making source code available to the public significantly aids\r\n    defenders and not just attackers. Continuous and broad peer-review,\r\n    enabled by publicly available source code, improves software\r\n    reliability and security through the identification and elimination\r\n    of defects that might otherwise go unrecognized by the core\r\n    development team. Conversely, where source code is hidden from the\r\n    public, attackers can attack the software anyway as described\r\n    above.  In addition, an attacker can often acquire the original\r\n    source code from suppliers anyway (either because the supplier\r\n    voluntarily provides it, or via attacks against the supplier); in\r\n    such cases, if only the attacker has the source code, the attacker\r\n    ends up with another advantage.\r\n\r\nHiding source code *does* inhibit the ability of third parties to\r\nrespond to vulnerabilities (because changing software is more difficult\r\nwithout the source code), but this is obviously *not* a security\r\nadvantage. In general, “Security by Obscurity” is widely denigrated.\r\n\r\nThis does *not* mean that the DoD will reject using proprietary COTS\r\nproducts. There are valid business reasons, unrelated to security, that\r\nmay lead a commercial company selling proprietary software to choose to\r\nhide source code (e.g., to reduce the risk of copyright infringement or\r\nthe revelation of trade secrets).  What it does mean, however, is that\r\nthe DoD will not reject consideration of a COTS product merely because\r\nit is OSS. Some OSS is very secure, while others are not; some\r\nproprietary software is very secure, while others are not. Each product\r\nmust be examined on its own merits.\r\n\r\n### Q: What are indicators that a specific OSS program will have fewer unintentional vulnerabilities?\r\n\r\nAs noted in the [Secure Programming for Linux and Unix\r\nHOWTO](http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/open-source-security.html#OPEN-SOURCE-SECURITY-BOTTOM-LINE),\r\nthree conditions reduce the risks from unintentional vulnerabilities in\r\nOSS:\r\n\r\n1.  Developers/reviewers need security knowledge. Knowledge is moreimportant than the licensing scheme.\r\n2.  People have to actually review the code.\r\n    -   This has a reduced likelihood if the program is niche or\r\n        rarely-used, has few developers, uses a rare computer\r\n        language, or is not really OSS. Conversely, if it widely-used, has many developers, and so\r\n        on, the likelihood of review increases. Examine if it is truly\r\n        community-developed - or if there are only a very few\r\n        developers.\r\n    -   Review really does happen. Several static tool vendors support\r\n        analysis of OSS (such as Coverity and Fortify) as a way to\r\n        improve their tools and gain market use. There are many general\r\n        OSS review projects, such as those by OpenBSD and the Debian\r\n        Security Audit team. And of course, individual OSS projects\r\n        often have security review processes or methods (such as\r\n        Mozilla's bounty system). If there are reviewers from many\r\n        different backgrounds (e.g., different countries), this can also\r\n        reduce certain risks. When examining a specific OSS project,\r\n        look for evidence that review (both by humans and tools) does\r\n        take place.\r\n3.  Problems must be fixed. It is far better to fix vulnerabilities before deployment - are such efforts occuring? When the software is already deployed, does the project develop and deploy fixes?\r\n\r\n### Q: Is there a risk of malicious code becoming embedded into OSS?\r\n\r\nThe use of *any* commercially-available software, be it proprietary or\r\nOSS, creates the risk of executing malicious code embedded in the\r\nsoftware.   Even if a commercial program did not originally have\r\nvulnerabilities, both proprietary and OSS program binaries can be\r\nmodified (e.g., with a \"hex editor\" or virus) so that it includes\r\nmalicious code.  It may be illegal to modify proprietary software, but\r\nthat will normally not slow an attacker. Thankfully, there are ways to\r\nreduce the risk of executing malicious code when using commercial\r\nsoftware (both proprietary and OSS).  It is impossible to completely\r\neliminate all risks; instead, focus on reducing risks to acceptable\r\nlevels.\r\n The use of software with a proprietary license provides absolutely no\r\nguarantee that the software is free of malicious code. Indeed, many\r\npeople have released proprietary code that is malicious. What's more,\r\nproprietary software release practices make it more difficult to be\r\nconfident that the software does not include malicious code.  Such\r\nsoftware does not normally undergo widespread public review, indeed, the\r\nsource code is typically not provided to the public and there are often\r\nlicense clauses that attempt to inhibit review further (e.g., forbidding\r\nreverse engineering and/or forbidding the public disclosure of analysis\r\nresults). Thus, to reduce the risk of executing malicious code,\r\npotential users should consider the reputation of the supplier and the\r\nexperience of other users, prefer software with a large number of users,\r\nand ensure that they get the \"real\" software and not an imitator.  \r\nWhere it is important, examining the security posture of the supplier\r\n(e.g., their processes that reduce risk) and scanning/testing/evaluating\r\nthe software may also be wise.\r\n\r\nSimilarly, OSS (as well as proprietary software) may indeed have\r\nmalicious code embedded in it. However, such malicious code cannot be\r\ndirectly inserted by \"just anyone\" into a well-established OSS project.\r\nAs noted above, OSS projects have a \"trusted repository\" that only\r\ncertain developers (the \"trusted developers\") can directly modify.  In\r\naddition, since the source code is publicly released, anyone can review\r\nit, including for the possibility of malicious code.  The public release\r\nalso makes it easy to have copies of versions in many places, and to\r\ncompare those versions, making it easy for many people to review\r\nchanges.  Many perceive this openness as an advantage for OSS, since OSS\r\nbetter meets Saltzer & Schroeder's \"Open design principle\" (\"the\r\nprotection mechanism must not depend on attacker ignorance\").  This is\r\nnot merely theoretical; [in 2003 the Linux kernel development process\r\nresisted an attack](http://www.linux.com/feature/32539).  Similarly,\r\nSourceForge/Apache (in 2001) and Debian (in 2003) countered external\r\nattacks.\r\n\r\n As with proprietary software, to reduce the risk of executing malicious\r\ncode, potential users should consider the reputation of the supplier\r\n(the OSS project) and the experience of other users, prefer software\r\nwith a large number of users, and ensure that they get the \"real\"\r\nsoftware and not an imitator (e.g., from the main project site or a\r\ntrusted distributor). Where it is important, examining the security\r\nposture of the supplier (the OSS project) and\r\nscanning/testing/evaluating the software may also be wise.\r\n\r\nThe example of Borland's InterBase/Firebird is instructive. For at least\r\n7 years, Borland's Interbase (a proprietary database program) had\r\nembedded in it a \"back door\"; the username \"politically\", password\r\n\"correct\", would immediately give the requestor complete control over\r\nthe database, a fact unknown to its users. Whether or not this was\r\nintentional, it certainly had the same form as a malicious back door.\r\nWhen the program was released as OSS, within 5 months this vulnerability\r\nwas found and fixed. This shows that proprietary software can include\r\nfunctionality that could be described as malicious, yet remain unfixed -\r\nand that at least in some cases OSS is reviewed and fixed.\r\n\r\nNote that merely being released by a US firm is no guarantee that there\r\nis no malicious embedded code.  First of all, being a US firm has little\r\nrelationship to the citizenship of its developers and its supplier's\r\ndevelopers. Also, US citizens can attempt to embed malicious code into\r\nsoftware, and many non-US citizens develop software without embedding\r\nmalicious code. In practice, commercial software (OSS or not) tends to\r\nbe developed globally, especially when you consider their developers and\r\nsupply chains. The good news is that, by definition, OSS provides its\r\nsource code, enabling a more informed evaluation than is typically\r\navailable for other kinds of COTS products.\r\n\r\nNote also that merely being developed for the government is no guarantee\r\nthat there is no malicious embedded code.  Such developers need not be\r\ncleared, for example.  Requiring that all developers be cleared first\r\ncan reduce certain risks (at substantial costs), where necessary, but\r\neven then there is no guarantee.\r\n\r\nNote that most commercial software is not intended to be used where the\r\nimpact of *any* error of any kind is *extremely* high (e.g., a large\r\nnumber of lives are likely to be immediately lost if even the slightest\r\nsoftware error occurs).  Software that meets very high\r\nreliability/security requirements, aka \"high assurance\" software, must\r\nbe specially designed to meet such requirements.  Most commercial\r\nsoftware (including OSS) is not designed for such purposes.\r\n\r\n### Q: What is the country of origin for software?\r\n\r\nThe Customs and Border Protection (CBP) has said, in an advisory ruling,\r\nthat the country of origin of software is the place where the software\r\nis converted into object code ([\"Software comes from the place where\r\nit's converted into object code, says CBP\",\r\nFierceGovernmentIT](http://www.fiercegovernmentit.com/story/software-comes-place-where-its-converted-object-code-says-cbp/2012-12-06)),\r\nfor \"purposes of granting waivers of certain 'Buy American' restrictions\r\nin U.S. law or practice or products offered for sale to the U.S.\r\nGovernment.\"\r\n\r\nThe [CBP\r\nruling](http://assets.fiercemarkets.net/public/sites/govit/software_cbpadvisoryruling_country_of_origin_talend.pdf)\r\npoints out that 19 U.S.C. § 2518(4)(B) says that, \"An article is a\r\nproduct of a country or instrumentality only if (i) it is wholly the\r\ngrowth, product, or manufacture of that country or instrumentality, or\r\n(ii) in the case of an article which consists in whole or in part of\r\nmaterials from another country or instrumentality, it has been\r\nsubstantially transformed into a new and different article of commerce\r\nwith a name, character, or use distinct from that of the article or\r\narticles from which it was so transformed.\" The CBP also pointed out a\r\nruling (Data General v. United States, 4 CIT 182 (1982)), that\r\nprogramming a PROM performed a substantial transformation. Under the\r\nsame reasoning, the CBP determined that building an object file from\r\nsource code performed a substantial transformation into a new article.\r\n\r\nUsing OSS in DoD systems\r\n------------------------\r\n\r\n### Q: Does the DoD already use open source software?\r\n\r\nYes, extensively. The [2003 MITRE study, \"Use of Free and Open Source\r\nSoftware (FOSS) in the U.S. Department of\r\nDefense\"](http://cio-nii.defense.gov/sites/oss/2003Survey/dodfoss_pdf.pdf),\r\nidentified some of many OSS programs that the DoD is *already* using,\r\nand concluded that OSS \"plays a more critical role in the [Department of\r\nDefense (DoD)] than has generally been recognized\".\r\n\r\nIntellipedia is implemented using MediaWiki, the open source software\r\ndeveloped to implement Wikipedia. This Open Source Software FAQ was\r\noriginally developed on Intellipedia, using a variety of web browsers\r\nincluding Mozilla Firefox. Thus, this FAQ was developed using open\r\nsource software.\r\n\r\nThe DoD is, of course, not the only user of OSS. [Gartner Group's Mark\r\nDriver stated in November\r\n2010](http://www.acq.osd.mil/dpap/dars/docs/DoD_Briefing_1.12.12_Notes.pdf)\r\nthat, \"Open source is ubiquitous, it's unavoidable... having a policy\r\nagainst open source is impractical and places you at a competitive\r\ndisadvantage.\"\r\n\r\n### Q: Is a lot of pre-existing open source software available?\r\n\r\nYes. Widely-used programs include the Apache web server, Firefox web\r\nbrowser, Linux kernel, and many other programs. [Estimating the Total\r\nDevelopment Cost of a Linux\r\nDistribution](http://www.linuxfoundation.org/publications/estimatinglinux.php)\r\nestimates that the Fedora 9 Linux distribution, which contains over\r\n5,000 software packages, represents about $10.8 billion of development\r\neffort.\r\n\r\n\r\n\r\n### Q: Is there an \"approved\", \"recommended\" or \"Generally Recognized as Safe/Mature\" list of Open Source Software? What programs are already in widespread use?\r\n\r\nNo, the DoD does not have an official recommendation for any particular\r\nOSS product or set of products, nor a \"Generally Recognized as\r\nSafe/Mature\" list. The [2003 MITRE study, \"Use of Free and Open Source\r\nSoftware (FOSS) in the U.S. Department of\r\nDefense\"](http://cio-nii.defense.gov/sites/oss/2003Survey/dodfoss_pdf.pdf)\r\ndid suggest developing a \"Generally Recognized As Safe\" (GRAS) list, but\r\nsuch a list has not been developed.\r\n\r\nThe US Army has a concept called\r\n\"[Networthiness](https://www.us.army.mil/suite/page/137030/)\" and will\r\ngrant a \"Certificate of Networthiness\" to software that is approved for\r\nuse. There are various OSS applications which already have such\r\ncertification.\r\n\r\nCommercial software (including OSS) that has widespread use often has\r\nlower risk, since there are often good reasons for its widespread use.\r\nThe MITRE study did identify some of many OSS programs that the DoD is\r\n*already* using, and may prove helpful. Examples of OSS that are in\r\nwidespread use include:\r\n\r\n-   [Apache](http://www.apache.org) - Web server\r\n-   Mozilla [Firefox](http://www.mozilla.com/firefox/) - Web browser\r\n-   Mozilla [Thunderbird](http://www.mozillamessaging.com/thunderbird/),\r\n    Evolution - Email client\r\n-   [OpenOffice.org](http://www.openoffice.org) - Office document suite\r\n-   OpenSSH - Secure Shell\r\n-   OpenSSL - SSL/cryptographic library implementation\r\n-   bind - DNS server\r\n-   Postfix, Sendmail - Mail servers\r\n-   [gcc](http://gcc.gnu.org/) - Compiler suite\r\n-   GNAT - Ada compiler suite (technically this is part of gcc)\r\n-   perl, Python, PHP - Scripting languages\r\n-   Samba - Windows - Unix/Linux interoperability\r\n-   Mailman - mailing list manager\r\n-   [MySQL](http://www.mysql.com/) and\r\n    [PostgreSQL](http://www.postgresql.org/) - Relational Database\r\n    Management Systems\r\n-   [GIMP](http://www.gimp.org/) - Bitmap graphics editor\r\n-   [MediaWiki](http://www.mediawiki.org/) - Wiki\r\n\r\n\r\n There are many \"Linux distributions\" which provides suites of such\r\nsoftware such as Red Hat Enterprise Linux, Fedora, Novell SuSE, Debian\r\nand Ubuntu. Other open source software implementations of Unix\r\ninterfaces include Solaris, OpenBSD, NetBSD, and FreeBSD.\r\n\r\nAgain, these are examples, and not official endorsements of any\r\nparticular product or supplier.\r\n\r\n### Q: What are some military-specific open source software programs?\r\n\r\nSome more military-specific OSS programs used in the military include:\r\n\r\n-   [FalconView](http://www.falconview.org/) - PC-based mapping\r\n    application\r\n-   Open Source Software for Imagery & Mapping\r\n    ([OSSIM](http://www.ossim.org/OSSIM/OSSIM_Home.html)) - geospatial\r\n    image viewing (with classified plugins)\r\n-   OSSIM Mapping ARchieve System\r\n    ([OMAR](http://www.ossim.org/OSSIM/OMAR.html)) - video indexing\r\n-   [BRL-CAD](http://brlcad.org/) - solid modeling (Army)\r\n-   [Optics](https://www.ballforge.net/) - MASINT toolset (with\r\n    classfied plugins)\r\n-   [Delta3D](http://www.delta3d.org/) - Game/Simulation engine for\r\n    modeling and simulation (e.g., for military training/exercises)\r\n\r\nThere are many others.\r\n\r\n### Q: How can I find open source software that meets my specific needs?\r\n\r\nOne approach is to use a general-purpose search engine (such as\r\n[Google](http://www.google.com)) and type in your key functional\r\nrequirements. If you know of an existing proprietary product meets your\r\nneeds, searching for its name plus \"open source source\" may help.\r\n\r\nIf you are looking for an application that has wide use, one of the\r\nvarious lists of \"open source alternatives\" may help. These include:\r\n\r\n-   [Open Source Alternatives (Ben Balter et\r\n    al.)](http://benbalter.github.com/open-source-alternatives/)\r\n-   [Open Source as Alternative](http://www.osalt.com/)\r\n\r\nIf you are looking for smaller pieces of code to reuse, search engines\r\nspecifically for code may be helpful. Examples include:\r\n\r\n-   [Grepcode.com](http://www.grepcode.com/)\r\n-   [Koders.com](http://koders.com/)\r\n-   [Google code search](http://code.google.com/codesearch)\r\n\r\nIf you know of others who have similar needs, ask them for leads.\r\n\r\n### Q: Is there any quantitative evidence that open source software can be as good as (or better than) proprietary software?\r\n\r\nYes; [Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)?\r\nLook at the Numbers!](http://www.dwheeler.com/oss_fs_why.html) is a\r\nsurvey paper that \"provides [quantitative\r\ndata](quantitative data \"wikilink\") that, in many cases, using open\r\nsource software / free software (abbreviated as OSS/FS, FLOSS, or FOSS)\r\nis a reasonable or even superior approach to using their proprietary\r\ncompetition according to various measures.. (its) goal is to show that\r\nyou should consider using OSS/FS when acquiring software\". It points to\r\nvarious studies related to market share, reliability, performance,\r\nscalability, security, and total cost of ownership.\r\n\r\nThis is in addition to the advantages from OSS because it can be\r\nreviewed, modified, and redistributed with few restrictions (inherent in\r\nthe definition of OSS).\r\n\r\nThat said, this does *not* mean that all OSS is superior to all\r\nproprietary software in all cases by all measures. Each government\r\nprogram must determine its needs, and then evaluate its options for\r\nmeeting those needs.\r\n\r\n### Q: When a DoD contractor is developing a new system/software as a deliverable in a typical DoD contract, is it possible to include existing open source software?\r\n\r\nYes, it's possible. In nearly all cases pre-existing OSS are \"commercial\r\ncomponents\", and thus their use is governed by the rules for including\r\nany commercial components in the deliverable. The use of commercial\r\ncomponents is generally encouraged, and when there are commercial\r\ncomponents, the government expects that it will normally use whatever\r\nlicense is offered to the public. Depending on the contract and its\r\ninterpretation, contractors may be required to get governmental\r\npermission to include commercial components in their deliverable; where\r\nthis applies, this would be true for OSS components as well as\r\nproprietary components. As with all commercial items, organizations must\r\nobey the terms of the commercial license, negotiate a different license\r\nif necessary, or not use the commercial item.\r\n\r\nAn alternative is to not *include* the OSS component in the deliverable,\r\nbut simply *depend* on it, as long as that is acceptable to the\r\ngovernment. This is often done when the deliverable is a software\r\napplication; instead of including commercially-available components such\r\nas the operating system or database system as part of the deliverable,\r\nthe deliverable could simply state what it requires.\r\n\r\n### Q: When a DoD contractor is developing a new system/software as a deliverable in a typical DoD contract, is it possible to use existing software licensed using the GNU General Public License (GPL)? Can the DoD used GPL-licensed software?\r\n\r\nYes. There is no DoD policy forbidding or limiting the use of software\r\nlicensed under the GNU General Public License (GPL).\r\n\r\nThe DoD already uses a wide variety of software licensed under the GPL.\r\nA [2003 MITRE study, \"Use of Free and Open Source Software (FOSS) in the\r\nU.S. Department of\r\nDefense\"](http://cio-nii.defense.gov/sites/oss/2003Survey/dodfoss_pdf.pdf),\r\nidentified many OSS programs that the DoD is *already* using that are\r\nlicensed using the GPL. These included the Linux kernel, the gcc\r\ncompilation suite (including the GNAT Ada compiler), the OpenOffice.org\r\noffice suite, the emacs text editor, the Nmap network scanner, OpenSSH\r\nand OpenSSH for encryption, and Samba for Unix/Linux/Windows\r\ninteroperability. This should not be surprising; the DoD uses OSS\r\nextensively, and the GPL is the most popular OSS license.\r\n\r\nAs with all commercial items, the DoD must comply with the item's\r\nlicense when using the item. There are two versions of the GPL in\r\nwidespread use: version 2 and version 3. The key issue with both\r\nversions of the GPL is that, unlike most other OSS licenses, the GPL\r\nlicenses require that a recipient of a binary (executable) must be able\r\nto demand and receive the source code of that program, and the recipient\r\nmust also be able to propogate the work under that license. The Free\r\nSoftware Foundation (FSF) interprets linking a GPL program with another\r\nprogram as creating a derivative work, and thus imposing this license\r\nterm in such cases.\r\n\r\nIn most cases, this GPL license term is not a problem. After all, most\r\nproprietary software licenses explicitly forbid modifying (or even\r\nreverse-engineering) the program, so the GPL actually provides\r\n*additional* rights not present in most proprietary software. So if the\r\nprogram is being used and not modified (a very common case), this\r\nadditional term has no impact. Even for many modifications (e.g., bug\r\nfixes) this causes no issues because in many cases the DoD has no\r\ninterest in keeping those changes confidential.\r\n\r\nHowever, if the GPL software must be mixed with other\r\nproprietary/classified software, the GPL terms must still be followed.\r\n\r\n### Q: Under what conditions can GPL-licensed software be mixed with proprietary/classified software?\r\n\r\nSoftware licensed under the GPL *can* be mixed with software released\r\nunder other licenses, and mixed with classified or export-controlled\r\nsoftware, but only under conditions that do not violate any license.\r\nSuch mixing can sometimes only occur when certain kinds of separation\r\nare maintained - and thus this can become a design issue.\r\n\r\nThe [2003 MITRE study section\r\n1.3.4](http://cio-nii.defense.gov/sites/oss/2003Survey/dodfoss_pdf.pdf)\r\noutlines several ways to legally mix GPL with proprietary or classified\r\nsoftware:\r\n\r\n-   Distribution Mixing – GPL and other software can be stored and\r\n    transmitted together. Example: GPL software can be stored on the\r\n    same computer disk as (most kinds of) proprietary software.\r\n-   Execution Mixing – GPL and other software can run at the same time\r\n    on the same computer or network. Example: GPL and (unrelated)\r\n    proprietary applications can be running at the same time on a\r\n    desktop PC.\r\n-   Application Mixing – GPL can rely on other software to provide it\r\n    with services, provided either that those services are either\r\n    generic (e.g., operating system services) or have been explicitly\r\n    exempted by the GPL software designer as non-GPL components.\r\n    Examples include GPL applications running on proprietary operating\r\n    systems or wrappers, and GPL applications that use proprietary\r\n    components explicitly marked as non-GPL. Windows Services for UNIX\r\n    3.0 is a good example of commercial use of GPL application mixing.\r\n-   Service Mixing – GPL can provide generic services to other software.\r\n    These services must be genuinely generic in the sense that the\r\n    applications that use them must not depend on the detailed design of\r\n    the GPL software to work. An example is (connecting) a GPL utility\r\n    to a proprietary software component by using the Unix \"pipe\"\r\n    mechanism, which allows one-way flow of data to move between\r\n    software components. This is the tightest form of mixing possible\r\n    with GPL and other types of software, but it must be used with care\r\n    to ensure that the GPL software remains generic and is not tightly\r\n    bound to any one proprietary software component.\r\n\r\nOften such separation can occur by separating information into data and\r\na program that uses it, or by defining distinct layers. As long as a GPL\r\nprogram does not embed GPL software into its outputs, a GPL program can\r\nprocess classified/proprietary information without question. Thus,\r\nGPL'ed compilers can compile classified programs (since the compilers\r\ntreat the classified program as data), and a GPL'ed implementation of a\r\nvirtual machine (VM) can execute classified software (since the VM\r\nimplementation runs the software as data). Many development tools\r\ncovered by the GPL include libraries and runtimes that are not covered\r\nby the GPL itself but the GPL with a runtime exception (e.g., the\r\nCLASSPATH exception) that specifically permits development of\r\nproprietary software. A GPL'ed \"engine\" program can be controlled by\r\nclassified data that it reads without issue. A GPL'ed program can run on\r\ntop of a classified/proprietary platform when the platform is a separate\r\n\"System Library\" (as defined in GPL version 3). Note that enforcing such\r\nseparation has many other advantages as well.\r\n\r\nThe U.S. government can often directly combine GPL and proprietary,\r\nclassified, or export-controlled software into a single program\r\narbitrarily, as long as the result is never conveyed outside the U.S.\r\ngovernment. However, this approach should not be taken lightly. This\r\napproach may inhibit later release of the combined result to other\r\nparties (e.g., allies), as release to an ally probably would in many\r\ncases be considered distribution. In some cases, export controlled\r\nsoftware may be permitted under the condition that the source code not\r\nbe released; this would prevent release of software that had mixed GPL\r\nand export-controlled software. When taking this approach, contractors\r\nhired to modify the software must not retain copyright or other rights\r\nto the result (else the software would be conveyed outside the U.S.\r\ngovernment); see [GPL version 3 section 2, paragraph\r\n2](http://www.gnu.org/licenses/gpl-3.0.html) which states this\r\nexplicitly. Where possible, it may be better to divide such components\r\ninto smaller components in a way that avoids this issue.\r\n\r\nIt can be argued that classified software can be arbitrarily combined\r\nwith GPL code, beyond the approaches described above. The argument is\r\nthat the classification rules are simply laws of the land (and not\r\n\"additional\" rules), the classification rules already forbid the release\r\nof the resulting binaries to those without proper clearances, and that\r\nthe GPL only requires that source code be released to those who received\r\na binary. While this argument may be valid, we know of no general\r\ncounsel ruling confirming this. Anyone who is considering this approach\r\nshould obtain a ruling from general counsel first (and please let the\r\nFAQ authors know!).\r\n\r\nIf a legal method for using the GPL software for a particular\r\napplication cannot be devised, and a different license cannot be\r\nnegotiated, then the GPL-licensed component cannot be used for that\r\nparticular purpose. Note that this also applies to proprietary software,\r\nwhich often have even stricter limits on if/how the software may be\r\nchanged.\r\n\r\n### Q: Is the GPL compatible with Government Unlimited Rights contracts, or does the requirement to display the license, etc, violate Government Unlimited Rights contracts?\r\n\r\nThe GPL and government \"unlimited rights\" terms have similar goals, but\r\ndiffer in details. This isn't usually an issue because of how typical\r\nDoD contract clauses work under the DFARS.\r\n\r\nAny software that has a non-government use and is licensed to the public\r\nis *commercial software*, by definition, including OSS programs licensed\r\nto the government using the GPL. Normally the government only expects to\r\nget the usual commercial rights to commercial software, and not\r\n\"unlimited rights\". So if the software displays a license in a way that\r\ncan't be legally disabled (as required by the GPL), there is no problem,\r\nbecause this is an ordinary commercial software license term. The same\r\nwould be true if you used Microsoft Windows; you aren't normally\r\npermitted to disable the rights-display functions of Microsoft Windows\r\neither.\r\n\r\nIn contrast, the government normally gets \"unlimited rights\" only when\r\nit pays for development of that software, in full or in part. Software\r\ndeveloped by government funding would typically be termed \"noncommercial\r\nsoftware\", and thus falls under different rules. The government *does*\r\nhave the right to take software it has unlimited rights to, and link it\r\nwith GPL software. After all, the government can use unlimited rights\r\nsoftware in any way it wishes.\r\n\r\nOnce the government has unlimited rights, it can release that software\r\nto the public in any it wishes - including by using the GPL. This is not\r\na contradiction; it's quite common for different organizations to have\r\ndifferent rights to the same software. The program available to the\r\npublic may improve over time, through contributions not paid for by the\r\nU.S. government. In that case, the U.S. government can choose to use the\r\nversion to which it has unlimited rights, or it can use the\r\npublicly-available commercial version available to the government\r\nthrough that version's commercial license (the GPL in this case).\r\n\r\n### Q: Does the Antideficiency act (ADA) prohibit all use of OSS due to limitations on voluntary services?\r\n\r\nNo. Relevant government authorities make it clear that the\r\nAntideficiency Act (ADA) does not generally prohibit the use of OSS due\r\nto limitations on voluntary services. Instead, the ADA prohibits\r\ngovernment employees from accepting services that are not intended or\r\nagreed to be gratuitous, but were instead rendered in the hope that\r\nCongress will subsequently recognize a moral obligation to pay for the\r\nbenefits conferred.\r\n\r\nPart of the ADA, Pub.L. 97-258, 96 Stat. 923, is in\r\n[31 U.S.C. § 1342, Limitation on voluntary services](http://www.law.cornell.edu/uscode/text/31/1342). This statute says\r\nthat, “An officer or employee of the United States Government or of the\r\nDistrict of Columbia government may not accept voluntary services for\r\neither government or employ personal services exceeding that authorized\r\nby law except for emergencies involving the safety of human life or the\r\nprotection of property. This section does not apply to a corporation\r\ngetting amounts to make loans (except paid in capital amounts) without\r\nlegal liability of the United States Government...”\r\n\r\nThe [US Government Accountability Office (GAO) Office of the General\r\nCounsel’s “Principles of Federal Appropriations Law” (aka the “Red\r\nBook”)](http://www.gao.gov/legal/redbook/redbook.html) explains federal\r\nappropriation law. Volume II of its third edition, section 6.C.3,\r\ndescribes in detail this prohibition on voluntary services. Section\r\n6.C.3.a notes that the voluntary services provision is not new; it first\r\nappeared, in almost identical form, back in 1884. The red book explains\r\nits purpose; since “an agency cannot directly obligate in excess or\r\nadvance of its appropriations, it should not be able to accomplish the\r\nsame thing indirectly by accepting ostensibly ‘voluntary’ services and\r\nthen presenting Congress with the bill, in the hope that Congress will\r\nrecognize a ‘moral obligation’ to pay for the benefits conferred...”\r\n\r\nThe red book section 6.C.3.b explains this prohibition in more detail.\r\nIt states that in 1913, the Attorney General developed an opinion (30\r\nOp. Att’y Gen. 51 (1913)) that “has become the leading case construing\r\n31 U.S.C. § 1342... the Attorney General drew a distinction that the\r\nComptroller of the Treasury thereafter adopted, and that GAO and the\r\nJustice Department continue to follow to this day—the distinction\r\nbetween ‘voluntary services’ and ‘gratuitous services.’” Some key text\r\nfrom this opinion, as identified by the red book, are:\r\n\r\n“[I]t seems plain that the words ‘voluntary service’ were not intended\r\nto be synonymous with ‘gratuitous service’ ... it is evident that the\r\nevil at which Congress was aiming was not appointment or employment for\r\nauthorized services without compensation, but the acceptance of\r\nunauthorized services not intended or agreed to be gratuitous and\r\ntherefore likely to afford a basis for a future claim upon Congress. . .\r\n.”\r\n\r\nMore recent decisions, such as [the 1982 decision B-204326 by the U.S.\r\nComptroller General](http://www.gao.gov/assets/450/441639.pdf), continue\r\nto confirm this distinction between “gratuitous” and “voluntary”\r\nservice.\r\n\r\nIn short, the ADA’s limitation on voluntary services does not broadly\r\nforbid the government from working with organizations and people who\r\nidentify themselves as volunteers, including those who develop OSS.\r\nInstead, Government employees must ensure that they do not accept\r\nservices rendered in the hope that Congress will subsequently recognize\r\na moral obligation to pay for the benefits conferred. Services that are\r\nintended and agreed to be gratuitous do not conflict with this statute.\r\nIn most cases, contributors to OSS projects intend for their\r\ncontributions to be gratuitous, and provide them for all (not just for\r\nthe Federal government), clearly distinguishing such OSS contributions\r\nfrom the “voluntary services” that the ADA was designed to prevent.\r\n\r\n### Q: How can I evaluate OSS options?\r\n\r\nOSS options should be evaluated in principle the same way you would\r\nevaluate any option, considering need, cost, and so on. In some cases,\r\nthe sources of information for OSS differ.\r\n\r\nBe sure to consider total cost of ownership (TCO), not just initial\r\ndownload costs. Even if OSS has no cost to download, there is still a\r\ncost for OSS due to installation, support, and so on (whether done\r\nin-house or through external organizations). Be sure to consider such\r\ncosts over a period of time (typically the lifetime of the system\r\nincluding its upgrades), and use the same period when evaluating\r\nalternatives; otherwise, one-time costs (such as costs to transition\r\nfrom an existing proprietary system) can lead to erroneous conclusions.\r\nInclude upgrade/maintenance costs, including indirect costs (such as\r\nhardware replacement if necessary to run updated software), in the TCO.\r\n By definition, open source software provides more rights to users than\r\nproprietary software (at least in terms of use, modification, and\r\ndistribution). That said, other factors may be more important for a\r\ngiven circumstance.\r\n\r\nThe DoD does not have a single required process for evaluating OSS. The\r\nfollowing externally-developed evaluation processes or tips may be of\r\nuse:\r\n\r\n-   [How to Evaluate Open Source Software / Free Software (OSS/FS)\r\n    Programs](http://www.dwheeler.com/oss_fs_eval.html)\r\n-   [Navica's Open Source Maturity Model\r\n    (OSMM)](http://www.navicasoft.com/pages/osmm.htm)\r\n-   [Capgemini's Open Source Maturity Model\r\n    (OSMM)](http://www.osspartner.com/portail/sections/accueil-public/evaluation-osmm)\r\n-   [Top Tips For Selecting Open Source\r\n    Software](http://www.oss-watch.ac.uk/resources/tips.xml)\r\n-   [Business Readiness Rating™\r\n    (BRR)](http://www.openbrr.org/wiki/index.php/Home)\r\n-   [QSOS](http://www.qsos.org/)\r\n\r\n### Q: How can I migrate to OSS?\r\n\r\nMigrating from an existing system to an OSS approach requires addressing\r\nthe same issues that any migration involves.\r\n\r\n[The IDA Open Source Migration\r\nGuidelines](http://www.netproject.com/docs/migoss/) recommend:\r\n\r\n-   before starting have a clear understanding of the reasons to\r\n    migrate;\r\n-   ensure that there is active support for the change from IT staff and\r\n    users;\r\n-   make sure that there is a champion for change – the higher up in the\r\n    organisation the better;\r\n-   build up expertise and relationships with the OSS movement;\r\n-   start with non critical systems;\r\n-   ensure that each step in the migration is manageable.\r\n\r\nIt also suggests that the following questions need to be addressed:\r\n\r\n-   how to ensure the interoperability of systems;\r\n-   how to support mobile users;\r\n-   how to securely identify remote users;\r\n-   how to build systems that are manageable.\r\n-   ensure that security is designed in from the start and not tacked on\r\n    as an after thought.\r\n\r\nIt also recommends ensuring \"that decisions made now, even if they do\r\nnot relate directly to a migration, should not further tie an\r\nAdministration to proprietary file formats and protocols\". It also notes\r\nthat OSS is a disruptive technology, in particular, that it is \"a move\r\naway from a product to a service based industry\".\r\n\r\n### Q: How can I get support for OSS that already exists?\r\n\r\nYou can support OSS either through a commercial organization, or you can\r\nself-support OSS; in either case, you can use community support as an\r\naid.\r\n\r\nCommercial support can either be through companies with specialize in\r\nOSS support (in general or for specific products), or through\r\ncontractors who specialize in supporting customers and provide the OSS\r\nsupport as part of a larger service. Examples of the former include Red\r\nHat, Novell, HP, Oracle, IBM, DMSolutions, SourceLabs, OpenLogic,\r\nCarahsoft, and Mozilla.\r\n\r\nSome have found that community support can be very helpful. The 1997\r\nInfoWorld “Best Technical Support” award was won by the \"Linux User\r\nCommunity\". However, you should examine past experience and your\r\nintended uses before depending on this as a primary mechanism for\r\nsupport.\r\n\r\n### Q: Am I required to have commercial support for OSS?\r\n\r\nNo, DoD policy does not require you to have commercial support for OSS,\r\nbut you must have *some* plan for support. The 2009 DoD CIO memo on open\r\nsource software says, in attachment 2, 2(d), \"The use of any software\r\nwithout appropriate maintenance and support presents an information\r\nassurance risk. Before approving the use of software (including OSS),\r\nsystem/program managers, and ultimately Designated Approving Authorities\r\n(DAAs), must ensure that the plan for software support (e.g., commercial\r\nor Government program office support) is adequate for mission need.\"\r\nNote that Government program office support is specifically identified\r\nas a possibly-appropriate approach.\r\n\r\nAs noted in the article [Open Source memo doesn't mandate a support\r\nvendor (by David Perera, FierceGovernmentIT, May 23,\r\n2012)](http://www.fiercegovernmentit.com/story/dod-official-open-source-memo-doesnt-mandate-support-vendor/2012-05-23),\r\nthe intent \"of the memo was not to issue a blanket requirement that all\r\nopen source software come bundled with contractor support or else it\r\ncan't be used... If a Defense agency is able to sustain the open source\r\nsoftware with 'its own skills and talents' then that can be enough to\r\nsatisfy the intent of the memo.\" In addition, \"How robust the support\r\nplan need be can also vary on the nature of the software itself... For\r\ncommand and control software, the degree would have to be greater than\r\nfor something that's not so critical to mission execution...\".\r\n\r\nCommunity OSS support is technically not enough by *itself* to provide\r\nthis support, because the OSS community cannot patch your servers or\r\nworkstations for you. However, support from in-house staff, augmented by\r\nthe OSS community, may be (and often is) sufficient. However, if you're\r\ngoing to rely on the OSS community, you must make sure that the OSS\r\ncommunity for that product is active, and that you have suitably\r\nqualified staff to implement the upgrades/enhancements developed by the\r\ncommunity.\r\n\r\nIf you have concerns about using in-house staff, augmented by the OSS\r\ncommunity for those components, then select and pay a commercial\r\norganization to provide the necessary support. Many programs and DAAs do\r\nchoose to use commercial support, and in many cases that is the best\r\napproach. However, using a support vendor is not the only approach or\r\nthe best approach in all cases; system/program managers and DAAs must\r\nlook at the specific situation to make a determination.\r\n\r\n### Q: How do GOTS, Proprietary COTS, and OSS COTS compare?\r\n\r\nGovernment Off-the-Shelf (GOTS), proprietary commercial off-the-shelf\r\n(COTS), and OSS COTS are all methods to enable reuse of software across\r\nmultiple projects.  Thus, they are all strategies for sharing the\r\ndevelopment and maintenance costs of software, potentially reducing its\r\ncost.\r\n\r\nGOTS is especially appropriate when the software *must not* be released\r\nto the public (e.g., it is classified) or when licenses forbid more\r\nextensive sharing (e.g., the government only has government-purpose\r\nrights to the software). If the software is not released to the public\r\nat all and it provides a direct military advantage, then the U.S.\r\nmilitary (and its allies) may obtain a distinct military advantage (note\r\nthat such software would normally be classified).  Unlike proprietary\r\nCOTS, GOTS has the advantage that the government has the right to change\r\nthe software whenever the government chooses to do so. Unfortunately,\r\nthe government must pay for *all* development and maintenance costs of\r\nGOTS; since these can be substantial, GOTS runs the risk of becoming\r\nobsolescent when the government cannot afford those costs. Also, since\r\nthere are a limited number of users, there is limited opportunity to\r\ngain from user innovation - which again can lead to obsolescence.  Even\r\nwhere there is GOTS/classified software, such software is typically only\r\na *portion* of the entire system, with other components implemented\r\nthrough COTS components.\r\n\r\n Proprietary COTS is especially appropriate when there is an existing\r\nproprietary COTS product that meets the need. Proprietary COTS tend to\r\nbe lower cost than GOTS, since the cost of development and maintenance\r\nis typically shared among a larger number of users (who typically pay to\r\nreceive licenses to use the product). Unfortunately, this typically\r\ntrades off flexibility; the government typically does not have the right\r\nto modify the software, so it often cannot fix serious security\r\nproblems, add arbitrary improvements, or make the software work on\r\nplatforms of its choosing.  If the supplier attains a monopoly or it is\r\ndifficult to switch from the supplier, the costs may skyrocket.  What is\r\nmore, the supplier may choose to abandon the product; software escrow\r\ncan reduce these risks somewhat, but in these cases it becomes GOTS with\r\nits attendant costs.\r\n OSS COTS is especially appropriate when there is an existing OSS COTS\r\nproduct that meets the need, or one can be developed and supported by a\r\nwide range of users/co-developers.  OSS COTS tends to be lower cost than\r\nGOTS, in part for the same reasons as proprietary COTS: its costs are\r\nshared among more users.  It also often has lower total\r\ncost-of-ownership than proprietary COTS, since acquiring it initially is\r\noften free or low-cost, and all other support activities (training,\r\ninstallation, modification, etc.) can be competed.  Its flexibility is\r\nas high as GOTS, since it can be arbitrarily modified.  However, note\r\nthat this cost discussion only applies if there are many users; if no\r\nuser/co-developer community is built up, then it can be as costly as\r\nGOTS.\r\n\r\n### Q: What are the risks of failing to consider the use of OSS components or approaches?\r\n\r\nFor the DoD, the risks of failing to consider the use of OSS where\r\nappropriate are of increased cost, increased schedule, and/or reduced\r\nperformance (including reduced innovation or security) to the DoD due to\r\nthe failure to use the commercial software that best meets the needs\r\n(when that is the case). It also risks reduced flexibility (including\r\nagainst cyberattack), since OSS permits arbitrary later modification by\r\nusers in ways that some other license approaches do not. In addition,\r\nignoring OSS would not be lawful; U.S. law specifically requires\r\nconsideration of commercial software (including extant OSS, regardless\r\nof exactly which license it uses), and specifically instructs\r\ndepartments to pass this requirement to consider commercial items down\r\nto contractors and their suppliers at all tiers.\r\n\r\nDoD contractors who always ignore components because they are OSS, or\r\nbecause they have a particular OSS license they don't prefer, risk\r\nlosing projects to more competitive bidders. If that competitor's use of\r\nOSS results in an advantage to the DoD (such as lower cost, faster\r\nschedule, increased performance, or other factors such as increased\r\nflexibility), contractors should expect that the DoD will choose the\r\nbetter bid. This does not mean that existing OSS elements should always\r\nbe chosen, but it means that they must be considered.\r\n\r\n### Q: Is there a large risk that widely-used OSS unlawfully includes proprietary software (in violation of copyright)?\r\n\r\nNo; this is a low-probability risk for widely-used OSS programs. A\r\nprimary reason that this is low-probability is the publicity of the OSS\r\nsource code itself (which almost invariably includes information about\r\nthose who made specific changes). Any company can easily review OSS to\r\nlook for proprietary code that should not be there; there are even OSS\r\ntools that can find common code. A company that found any of its\r\nproprietary software in an OSS project can in most cases quickly\r\ndetermine who unlawfully submitted that code and sue that person for\r\ninfringement.\r\n\r\nIn addition, widely-used licenses and OSS projects often include\r\nadditional mechanisms to counter this risk. The GPL and LGPL licenses\r\nspecifically recommend that \"You should also get your employer (if you\r\nwork as a programmer) or school, if any, to sign a 'copyright\r\ndisclaimer' for the program, if necessary.\", and point to additional\r\ninformation. Many projects, particularly the large number of projects\r\nmanaged by the Free Software Foundation (FSF), ask for an employer's\r\ndisclaimer from the contributor's employer in a number of circumstances.\r\nThe Linux kernel project requires that a person proposing a change add a\r\n\"Signed-off-by\" tag, attesting that the \"patch, to the best of his or\r\nher knowledge, can legally be merged into the mainline and distributed\r\nunder the terms of (the license).\"\r\n\r\nIn practice, OSS projects tend to be remarkably clean of such issues.\r\nFor example, a [Code Analysis of the Linux Wireless Team's ath5k\r\nDriver](http://www.softwarefreedom.org/resources/2007/ath5k-code-analysis.html)\r\nfound no license problems.\r\n\r\nWhen considering any software (OSS or proprietary), look for evidence\r\nthat the risk of unlawful release is low. Factors that greatly reduce\r\nthis risk include:\r\n\r\n-   Widespread availability and use of the software (which increases the\r\n    likelihood of detection)\r\n-   Configuration management systems that record the identity of\r\n    individual contributors (which acts as a deterrent)\r\n-   Licenses or development policies that warn against the unlawful\r\n    inclusion of material, or require people to specifically assert that\r\n    they are acting lawfully (which reduce the risk of unintentional\r\n    infringement)\r\n-   Lack of evidence of infrigement (e.g., an Internet search for\r\n    project name + \"copyright infringement\" turns up nothing).  Parties\r\n    are innocent until proven guilty, so if there *is* such a charge,\r\n    investigate the charges' merits instead of presuming guilt.\r\n\r\n### Q: Is there a large risk to DoD contractors that widely-used OSS violates enforceable software patents?\r\n\r\nTypically not, though the risk varies depending on their contract and\r\nspecific circumstance. Note, however, that this risk has little to do\r\nwith OSS, but is instead rooted in the risks of U.S. patent infringement\r\nfor *all* software, and the patent indemnification clauses in their\r\ncontract.\r\n\r\nIt is difficult for software developers (OSS or not) to be confident\r\nthat they have avoided software patent infringement in the United\r\nStates, for a variety of reasons. Software might not infringe on a\r\npatent when it was released, yet the same software may later infringe on\r\na patent if the patent was granted after the software's release. Many\r\nsoftware developers find software patents difficult to understand,\r\nmaking it difficult for them to determine if a given patent even applies\r\nto a given program. Patent examiners have relatively little time to\r\nreview each patent, and do not have effective access to most prior art\r\nin software, which may lead them to grant patents for\r\npreviously-published inventions or \"obvious\" inventions. The U.S. has\r\ngranted a large number of software patents, making it difficult and\r\ncostly to examine all of them. Recent rulings have strengthened the\r\nrequirement for \"non-obviousness\", which probably renders unenforceable\r\nsome already-granted software patents, but at this time it is difficult\r\nto determine which ones are affected. As a result, it is difficult to\r\ndevelop software and be confident that it does not violate enforceable\r\npatents. The DoD has not expressed a position on whether or not software\r\nshould be patented, but it *is* interested in ensuring that software\r\nthat effectively supports its missions can be developed in a\r\ncost-effective, timely, and legal manner.\r\n\r\nU.S. government contractors (including those in the DoD) are often\r\nindemnified from patent infringement by the U.S. government as part of\r\ntheir contract. This greatly reduces contractors' risks, enabling them\r\nto get work done (given this complex environment). They can obtain this\r\nby receiving certain authorization clauses in their contracts. [FAR\r\n52.227-1 (Authorization and\r\nConsent)](http://www.arnet.gov/far/current/html/52_227.html), as\r\nprescribed by [FAR\r\n27.201-2(a)(1)](http://www.arnet.gov/far/current/html/Subpart%2027_2.html#wp1035008),\r\ninserts the clause that the \"Government authorizes and consents to all\r\nuse and manufacturer... of any invention (covered by) U.S. patent\". The\r\nrelated FAR 52.227-2 (Notice and Assistance Regarding Patent and\r\nCopyright Infringement), as prescribed by FAR 27.201-2(b), requires the\r\ncontractor to report to the Contracting Officer each notice or claim of\r\npatent/copyright infrigement in reasonable written detail. Specific\r\npatents can also be authorized using clause FAR 52.227-5 or via listed\r\nexceptions of FAR 52.227-3. See also [DFARS subpart 227.70--infringement\r\nclaims, licenses, and\r\nassignments](http://www.acq.osd.mil/dpap/dars/dfars/html/current/227_70.htm)\r\nand\r\n[28 USC 1498](http://www.law.cornell.edu/uscode/28/usc_sec_28_00001498----000-.html).\r\n\r\nAs noted in [DFARS\r\n27.201-1](http://www.arnet.gov/far/current/html/Subpart%2027_2.html#wp1035008),\r\n\"Pursuant to 28 U.S.C. 1498, the exclusive remedy for patent or\r\ncopyright infringement by or on behalf of the Government is a suit for\r\nmonetary damages against the Government in the Court of Federal Claims.\r\nThere is no injunctive relief available, and there is no direct cause of\r\naction against a contractor that is infringing a patent or copyright\r\nwith the authorization or consent of the Government (e.g., while\r\nperforming a contract).\"\r\n\r\nThere are other ways to reduce the risk of software patent infringement\r\n(in the U.S.) as well:\r\n\r\n-   Some protocols and formats have been specifically devised and\r\n    reviewed to avoid patents; using them is more likely to avoid\r\n    problems.\r\n-   Prior art invalidates patents. Patents expire after 20 years, so any\r\n    idea (\"invention\") implemented in software publicly available for\r\n    more than 20 years should not, in theory, be patentable. Once an\r\n    invention is released to the public, the inventor has only one year\r\n    to file for a patent, so any new ideas in some software must have a\r\n    patent filed within one year by that inventor, or (in theory) they\r\n    cannot be patented. See [Prior Art and Its Uses: A Primer, by\r\n    Theodore C.\r\n    McCullough](http://www.groklaw.net/articlebasic.php?story=20060414004039219)\r\n-   OSS can often be purchased (directly, or as a support contract), and\r\n    such purchases often include some sort of indemnification.\r\n-   Various organizations have been formed to reduce patent risks for\r\n    OSS. The [Open Invention\r\n    Network](http://www.openinventionnetwork.com/) (OIN^SM^) may in some\r\n    cases provide some additional protection. OIN purchases patent\r\n    rights; patents owned by OIN are available royalty-free to any\r\n    company, institution or individual that agrees not to assert its\r\n    patents against the \"Linux System\" (which includes a large set of\r\n    OSS projects). [The Linux Foundations' Patent\r\n    Commons](http://www.patentcommons.org/) forum is a neutral forum\r\n    where patent pledges and other commitments can be readily accessed\r\n    and easily understood.\r\n\r\n### Q: How can I avoid failure to comply with an OSS license? What are good practices for use of OSS in a larger system?\r\n\r\nThe following are good practices:\r\n\r\n-   Educate all software developers that they must comply with all valid\r\n    licenses - including both proprietary *and* open source software\r\n    licenses. Explain the basic terms of the most common OSS licenses to\r\n    them.\r\n-   Before including *any* software in a larger system (be it\r\n    proprietary *or* OSS), review its license to ensure that the license\r\n    will not impede anticipated uses.\r\n-   When including externally-developed software in a larger system\r\n    (e.g., as a library), make it clearly separable from the other\r\n    components and easy to update. Commercial software (both proprietary\r\n    and OSS) is occasionally updated to fix errors (including security\r\n    vulnerabilities), and your system should be designed so that it is\r\n    relatively easy to accept these updates.\r\n-   Document from where and when any external software was acquired, as\r\n    well as the license conditions, so that future users and maintainers\r\n    can easily comply with the license terms.\r\n\r\nReleasing software as OSS\r\n-------------------------\r\n\r\n### Q: Has the U.S. government released OSS projects or improvements?\r\n\r\nYes, both entirely new programs and improvements of existing OSS have\r\nbeen developed using U.S. government funds. There are far too many\r\nexamples to list; a few examples are:\r\n\r\n-   [Delta3D](http://www.delta3d.org/) - Open Source Gaming and\r\n    Simulation Engine\r\n-   [Security-Enhanced Linux\r\n    (SELinux)](http://en.wikipedia.org/wiki/Selinux) - Security\r\n    enhancements to Linux-based operating systems\r\n-   [OpenVista](http://sourceforge.net/projects/openvista) and\r\n    [Hardhats](http://www.hardhats.org/) - Implementations of US\r\n    Veterans Affairs' enterprise grade health care information system\r\n-   [Expect](http://expect.nist.gov/) - Tool for automating interactive\r\n    applications. Since Expect was developed at the National Institute\r\n    of Standards and Technology by employees of the Federal Government\r\n    in the course of their official duties, it is not subject to\r\n    copyright protection and is in the public domain.\r\n-   [EZRO](http://ezro.devis.com/) - System for managing text, video,\r\n    audio, and other content on the web\r\n-   [Evergreen](http://www.evergreen-ils.org/) - Library Management (by\r\n    the State of Georgia)\r\n-   [OpenSSL](http://www.openssl.org/) - this improvement was a FIPS\r\n    140-2 evaluation (for cryptographic modules)\r\n-   [bind](http://www.isc.org/software/bind)'s implementation of DNS\r\n    security (DNSSEC) - bind is a widely used Domain Name Server (DNS);\r\n    the U.S. government funded security enhancements to increase\r\n    security of the Internet\r\n-   [GNAT Ada compiler](http://www.gnu.org/software/gnat/)\r\n-   [Object-Oriented Data Technology (OODT)](http://oodt.apache.org/) -\r\n    Transparent access to distributed resources ([this NASA Jet\r\n    Propulsion Laboratory (JPL) project became a top level open source\r\n    Apache Software Foundation project in\r\n    2011](http://www.serverwatch.com/news/article.php/3919891/NASA-Tech-Gets-Open-Source-Apache-Blessing.htm))\r\n-   BSD TCP/IP suite - Provided the basis of the Internet\r\n-   [Falconview](http://www.falconview.org) - Mapping Application\r\n-   [Geographic Resources Analysis Support System\r\n    (GRASS)](http://grass.osgeo.org/) - Geographic Information System\r\n    (GIS) software used for geospatial data management and analysis,\r\n    image processing, graphics/maps production, spatial modeling, and\r\n    visualization\r\n-   [Opticks](http://opticks.org/) - expandable remote sensing and\r\n    imagery analysis software platform\r\n-   [OSSIM](http://www.ossim.org/OSSIM/OSSIM_Home.html) - geo-spatial\r\n    image processing for remote sensing, photogrammetry, and Geographic\r\n    Information Systems (GIS).\r\n-   [VSIPL](http://www.vsipl.org/) - Vector Signal Image Processing\r\n    Library\r\n-   [BRL-CAD](http://brlcad.org/) - cross-platform combinatorial\r\n    Constructive Solid Geometry (CSG) solid modeling system\r\n-   [Globus Toolkit](http://www.globus.org/toolkit/about.html) -\r\n    enabling technology for the \"Grid,\" letting people share computing\r\n    power, databases, and other tools securely online across corporate,\r\n    institutional, and geographic boundaries without sacrificing local\r\n    autonomy.\r\n-   [Paraview](http://www.paraview.org/) - multi-platform data analysis\r\n    and visualization application.\r\n\r\n### Q: What are the risks of the government releasing software as OSS?\r\n\r\nThe key risk is the revelation of information that should not be\r\nreleased to the public. Classified software should *already* be marked\r\nas such, of course. This risk is mitigated by reviewing software (in\r\nparticular, for classification and export control issues) before public\r\nrelease.\r\n\r\n### Q: What are the risks of the government *not* releasing software as OSS?\r\n\r\nIf the government modifies existing OSS, but fails to release those\r\nimprovements back to the main OSS project, it risks:\r\n\r\n-   Greatly increased costs, due to the effort of self-maintaining its\r\n    own version\r\n-   Inability to use improvements (including security patches and\r\n    innovations) by others, where it uses a \"non-standard\" version\r\n    instead of the version being actively maintained\r\n\r\nSimilarly, if the government develops new software but does not release\r\nit as OSS, it risks:\r\n\r\n-   Greatly increased cost, due to having to bear the *entire* burden of\r\n    development costs\r\n-   Inability to use improvements (including security patches and\r\n    innovations) by others, since they do not have the opportunity to\r\n    aid in its development\r\n-   Obsolescence due to the development and release of a competing\r\n    commercial (e.g., OSS) project. In this case, the government has the\r\n    unenviable choice of (1) spending possibly large sums to switch to\r\n    the new project (which would typically have a radically different\r\n    interface and goals), or (2) continuing to use the government-unique\r\n    custom solution, which typically becomes obsolete and leaves the\r\n    U.S. systems far less capable that others' (including those of U.S.\r\n    adversaries)\r\n-   Questions about why the government - who represents \"the people\" -\r\n    is not releasing software (that the people paid for) back to the\r\n    people.\r\n\r\nClearly, classified software cannot be released back to the public as\r\nopen source software. However, often software can be split into various\r\ncomponents, some of which are classified and some of which are not, and\r\nit is to these *unclassified* portions that this text addresses.\r\n\r\n### Q: When can the U.S. federal government or its contractors publicly release, as OSS, software developed with government funds?\r\n\r\n\"Clarifying Guidance Regarding Open Source Software (OSS)\" states that\r\n\"Software items, including code fixes and enhancements, developed for\r\nthe Government should be released to the public (such as under an open\r\nsource license) when all of the following conditions are met:\r\n\r\n1.  The project manager, program manager, or other comparable official\r\n    determines that it is in the Government’s interest to do so, such as\r\n    through the expectation of future enhancements by others.\r\n2.  The Government has the rights to reproduce and release the item, and\r\n    to authorize others to do so. For example, the Government has public\r\n    release rights when the software is developed by Government\r\n    personnel, when the Government receives \"unlimited rights\" in\r\n    software developed by a contractor at Government expense, or when\r\n    pre-existing OSS is modified by or for the Government.\r\n3.  The public release of the item is not restricted by other law or\r\n    regulation, such as the Export Administration Regulations or the\r\n    International Traffic in Arms Regulation, and the item qualifies for\r\n    Distribution Statement A, per DoD Directive 5230.24 (reference\r\n    (i)).\"\r\n\r\nThe government or contractor must determine the answer to these\r\nquestions:\r\n\r\n1.  . What contract applies, what are its terms, and what decisions have\r\n    been made?\r\n2.  . Do you have the necessary copyright-related rights?\r\n3.  . Do you have the necessary other intellectual rights (e.g.,\r\n    patents)?\r\n4.  . Do you have permission to release to the public (classification,\r\n    distribution statements, export controls)?\r\n5.  . Do you have the materials (e.g., source code) and are all\r\n    materials properly marked?\r\n\r\nSource: [Publicly Releasing Open Source Software Developed for the U.S.\r\nGovernment](http://journal.thedacs.com/issue/56/180).\r\n\r\nThe following questions discuss some specific cases.\r\n\r\n### Q: Can government employees develop software as part of their official duties and release it under an open source license?\r\n\r\nNot under typical open source software licenses based on copyright, but\r\nthere is an alternative with the same practical effect.\r\n\r\nSoftware developed by US federal government employees (including\r\nmilitary personnel) as part of their official duties is not subject to\r\ncopyright protection in the US (see 17 USC § 105). Software not subject\r\nto copyright is often called “public domain” software. Public domain\r\nsoftware (in this copyright-related sense) can be used by anyone for any\r\npurpose, and cannot by itself be released under a copyright license\r\n(including typical open source software licenses).\r\n\r\nHowever, software written entirely by federal government employees as\r\npart of their official duties *can* be released as “public domain”\r\nsoftware. This is not a copyright license, it is the *absence* of a\r\nlicense. By some definitions this is technically not an open source\r\nlicense, because no license is needed, but such “public domain” software\r\ncan be legally used, modified, and combined with other software without\r\nrestriction. Thus, “public domain” software provides recipients all of\r\nthe rights that open source software must provide. An example of such\r\nsoftware is [Expect](http://expect.nist.gov/), which was developed and\r\nreleased by NIST as public domain software. Note that under the DoD\r\ndefinition of open source software, such public domain software *is*\r\nopen source software.\r\n\r\nNote that when government employees develop software as part of their\r\nofficial duties, it *can* be protected by copyright in other countries,\r\nbut note that these can only be enforced outside the US. Also, there are\r\nrare exceptions for NIST and the US Postal Service employees where a US\r\ncopyright can be obtained (see [CENDI's Frequently Asked Questions About\r\nCopyright](http://www.cendi.gov/publications/04-8copyright.html)).\r\n\r\nGovernment employees may also modify existing open source software. If\r\nsome portion of the software is protected by copyright, then the\r\ncombined software work can be released under a copyright license. (See\r\nnext question.)\r\n\r\n(See also [GPL FAQ, Question \"Can the US Government release a program\r\nunder the GNU GPL?\"](http://www.gnu.org/licenses/gpl-faq.html#GPLUSGov))\r\n\r\n### Q: Can government employees contribute code to open source software projects?\r\n\r\nYes, but the following considerations apply:\r\n\r\nAs stated above, software developed by government employees as part of\r\ntheir official duties is not subject to copyright protection in the\r\nUnited States. If a government employee enhances or modifies a\r\n(copyrighted) open source software program, the resulting work is a\r\n“joint work” (see 17 USC § 101) which is partially copyrighted and\r\npartially public domain. The resulting joint work as a whole is\r\nprotected by the copyrights of the non-government authors and may be\r\nreleased according to the terms of the original open-source license.\r\n\r\nHowever, the public domain portions may be extracted from such a joint\r\nwork and used by anyone for any purpose. For computer software, modern\r\nversion control and source code comparison tools typically make it easy\r\nto isolate the contributions of individual authors (via \"blame\" or\r\n\"annote\" functions).\r\n\r\n(See also [Free Software Foundation License List, Public\r\nDomain](http://www.gnu.org/philosophy/license-list.html#PublicDomain))\r\n\r\n(See also [GPL FAQ, Question \"Can the US Government release improvements\r\nto a GPL-covered\r\nprogram?\"](http://www.gnu.org/licenses/gpl-faq.html#GPLUSGovAdd))\r\n\r\n### Q: Can contractors develop software for the government and then release it under an open source license?\r\n\r\nIn many cases, yes, but this depends on the specific contract and\r\ncircumstances. Under the \"default\" DFARS and FAR rules and processes,\r\nthe contractor often keeps and exercise the rights of a copyright\r\nholder, which enables them to release that software as open source\r\nsoftware (as long as other laws and regulations are met).\r\n\r\nFor DoD contractors, if the standard DFARS contract clauses are used (in\r\nparticular DFARS 252.227-7014) then the contractor who developed the\r\nsoftware retains the copyright to the software and has the right to\r\nrelease it to others, even if the software was developed exclusively\r\nwith government funds. In some cases a DoD contractor may be required to\r\ntransfer copyright to the government for works produced under contract\r\n(see DFARS 252.227-7020). If this is the case, then the contractor\r\ncannot release the software as OSS without permission, because the\r\ncontractor doesn't own the copyright.\r\n\r\nContractors for other federal agencies may have a different process to\r\nuse, but after going through a process they can often release such\r\nsoftware as open source software. If the contract includes the typical\r\nFAR 52.227-14 (Rights in data - general) clause, without any special\r\nalternatives or additions, then the contractor must make a written\r\nrequest for permission to assert copyright in works containing data\r\nfirst produced under the contract. As described in FAR 27.404-3(a)(2), a\r\ncontracting officer should grant such a request only “when [that] will\r\nenhance appropriate dissemination or use” but release as open source\r\nsoftware would typically qualify as a justification for enhanced\r\ndissemination and use. Certain FAR clause alternatives (such as FAR\r\n52.227-17) require the contractor to assign the copyright to the\r\ngovernment. Again, if this is the case, then the contractor cannot\r\nrelease the software as OSS without permission, because the contractor\r\ndoesn't own the copyright.\r\n\r\nThere are many alternative clauses in the FAR and DFARS, and specific\r\ncontracts can (and often do) have different agreements on who has which\r\nrights to software developed under a government contract. The FAR and\r\nDFARS specifically permit different agreements to be struck (within\r\ncertain boundaries). Thus, if there is an existing contract, you *must*\r\ncheck the contract to determine the specific situation; the text above\r\nmerely describes common cases.\r\n\r\nContractors must still abide with all other laws before being allowed to\r\nrelease anything to the public. Obviously, contractors cannot release\r\nanything (including software) to the public if it is classified. The\r\nrelease of the software may be restricted by the International Traffic\r\nin Arms Regulation or Export Administration Regulation. The release may\r\nalso be limited by patent and trademark law.\r\n\r\n### Q: Can the government release software under an open source license if it was developed by contractors under government contract?\r\n\r\nIn many cases, yes, but this depends on the specific contract and\r\ncircumstances. The government can typically release software as open\r\nsource software once it has \"unlimited rights\" to the software. The\r\nusual DoD contract clause (DFARS 252.227-7014) permits this by default.\r\nThe usual federal non-DoD clause (FAR 52.227-14) also permits this by\r\ndefault as long as the government has not granted the contractor the\r\nright to assert copyright. If the government has received copyright\r\n(e.g., because the FAR 52.227-17 or DFARS 252.227-7020 clauses apply)\r\nthen the government can release the software as open source software.\r\n\r\nUnder the DFARS or the FAR, the government can release software as open\r\nsource software once it receives \"unlimited rights\" to that software.\r\nDFARS 252.227-7014(a)(15) defines \"unlimited rights\" as \"rights to use,\r\nmodify, reproduce, release, perform, display, or disclose computer\r\nsoftware or computer software documentation in whole or in part, in any\r\nmanner and for any purpose whatsoever, and to have or authorize others\r\nto do so\". As noted in \"Technical Data and Computer Software: A Guide to\r\nRights and Responsibilities Under Federal Contracts, Grants and\r\nCooperative Agreements\" by the Council on Governmental Relations (CAGR),\r\n\"This unlimited license enables the government to act on its own behalf\r\nand to authorize others to do the same things that it can do, thus\r\ngiving the government essentially the same rights as the copyright\r\nowner.\" In short, once the government has unlimited rights, it has\r\nessentially the same rights as a copyright holder, and can then use\r\nthose rights to release that software under a variety of conditions\r\n(including an open source software license), because it has the use and\r\nmodify the software at will, *and* has the right to authorize others to\r\ndo so.\r\n\r\nIf the standard DFARS contract clauses are used (see DFARS\r\n252.227-7014), then unless other arrangements are made, the government\r\nhas unlimited rights to a software component when (1) it pays entirely\r\nfor the development of it (see DFARS 252.227-7014(b)(1)(i)), or (2) it\r\nis five years after contract signature if it partly paid for its\r\ndevelopment (see DFARS 252.227-7014(b)(2)). Before award, a contractor\r\nmay identify the components that will have more restrictive rights\r\n(e.g., so the government can prefer proposals that give the government\r\nmore rights), and under limited conditions the list can be modified\r\nlater (e.g., for error correction). Where possible, software developed\r\npartly by government funds should broken into a set of smaller\r\ncomponents at the \"lowest practicable level\" so the rules can be applied\r\nseparately to each one. Note, however, that this may be negotiated; if\r\nthe government agrees to only receive lesser rights (such as\r\ngovernment-purpose rights or restricted rights) then the government does\r\n*not* have the rights necessary to release that software as open source\r\nsoftware.\r\n\r\nThe rules for many other U.S. departments may be very different.\r\nContracts under the federal government FAR, but not the DFARS, often use\r\nclause FAR 52.227-14 (Rights in Data - General). By default, the\r\ngovernment has the necessary rights if it does not permit the contractor\r\nto assert copyright, but it loses those rights if the government permits\r\nthe contractor to assert copyright.\r\n\r\nIf the contractor was required to transfer copyright to the government\r\nfor works produced under contract (e.g., because the FAR 52.227-17 or\r\nDFARS 252.227-7020 clauses apply to it), then the government can release\r\nthe software as open source software, because the government owns the\r\ncopyright. The [NASA FAR Supplement (NFS)\r\n1852.227-14](http://www.hq.nasa.gov/office/procurement/regs/5227.htm)\r\ngives NASA the right, under typical conditions, to demand that a\r\ncontractor assert copyright and then assign the copyright to the\r\ngovernment, which would again give the government the right to release\r\nthe software as open source software.\r\n\r\nIf there is an existing contract, you *must* check the contract to\r\ndetermine the specific situation; the text above merely describes common\r\ncases. There are many alternative clauses in the FAR and DFARS, and\r\nspecific contracts can (and often do) have different specific agreements\r\non who has which rights to software developed under a government\r\ncontract. The FAR and DFARS specifically permit different agreements to\r\nbe struck, within certain boundaries, and other agencies have other\r\nsupplements.\r\n\r\nIf the intent of a contract is to develop software to be released as\r\nopen source software, it is best to expressly include release as OSS as\r\npart of the contract. This makes the expectations clear to all parties,\r\nwhich may be especially important as personnel change.\r\n\r\nOther laws must still be obeyed. Classified information may not be\r\nreleased to the public without special authorization to do so. The\r\nrelease of the software may be restricted by the International Traffic\r\nin Arms Regulation (ITAR) or Export Administration Regulation (EAR). The\r\nrelease may also be limited by patent and trademark law.\r\n\r\n(See also [\"Publicly Releasing Open Source Software Developed for the\r\nU.S. Government\" by Dr. David A. Wheeler, DoD Software Tech News,\r\nFebruary 2011](http://journal.thedacs.com/issue/56/180).)\r\n\r\n### Q: Is there a standard marking for software where the government has unlimited rights?\r\n\r\nThe FAR and DFARS do not currently mandate any specific marking for\r\nsoftware where the government has unlimited rights. This can be a cause\r\nof great confusion, because without any markings, a recipient is often\r\nunaware that the government has unlimited rights to it. Yet if the\r\ngovernment does not know it has certain rights, it becomes difficult for\r\nthe government to exercise its rights. This is important for releasing\r\nOSS, because the government can release software as OSS if it has\r\nunlimited rights.\r\n\r\nThe following marking should be added to software when the government\r\nhas unlimited rights due to the use of the DFARS 252.227-7014 contract:\r\n\r\n\"The U.S. Government has Unlimited Rights in this computer software\r\npursuant to the clause at DFARS 252.227-7014. Any reproduction of this\r\ncomputer software, or portions thereof, marked with this legend must\r\nalso reproduce these markings.\"\r\n\r\n### Q: Does releasing software under an OSS license count as commercialization?\r\n\r\nIn most cases, yes. U.S. law governing federal procurement\r\n[U.S. Code Title 41, Chapter 7, Section 403](http://www.law.cornell.edu/uscode/41/usc_sec_41_00000403----000-.html) defines \"commercial item\"\r\nas including \"Any item, other than real property, that is of a type\r\ncustomarily used by the general public or by non-governmental entities\r\nfor purposes other than governmental purposes (i.e., it has some\r\nnon-government use), and (i) Has been sold, leased, or licensed to the\r\ngeneral public; or (ii) Has been offered for sale, lease, or license to\r\nthe general public ...\". Thus, as long as the software has at least one\r\nnon-governmental use, software released (or offered for release) to the\r\npublic is a commercial item for procurement purposes, *even if* it was\r\noriginally developed using public funds.\r\n\r\nThis does not mean that organizations will automatically arise to help\r\ndevelop/support it. Whether or not this will occur depends on factors\r\nsuch as the number of potential users (more potential users makes this\r\nmore likely), the existence of competing OSS programs (which may\r\nout-compete the newly released component), and how difficult it is to\r\ninstall/use. Thus, components that have the potential to (eventually)\r\nsupport many users are more likely to succeed. Similarly, delaying a\r\ncomponent's OSS release too long may doom it, if another OSS component\r\nis released first. If the OSS is intended for use on Linux/Unix systems,\r\n[follow standard source installation release\r\npractices](http://www.dwheeler.com/essays/releasing-floss-software.html)\r\nso that it is easier for users to install.\r\n\r\n\r\n### Q: What license should the government or contractor choose/select when releasing open source software?\r\n\r\nIt depends on the goals for the project, however, here are some\r\nguidelines:\r\n\r\n-   **Copyright public domain where required by law.**  You *must*\r\n    release it without any copyright protection (e.g., as \"copyright\r\n    public domain\") if you release it at all and if it was developed by\r\n    US government employee(s) as part of their official duties. \r\n    Otherwise, choose some existing OSS license, since all existing\r\n    licenses add some legal protections from lawsuits. (The \"MIT\r\n    license\" is similar to public domain release, but with some legal\r\n    protection from lawsuits.)\r\n-   **Release modifications under same license.**  If it is a\r\n    modification of an existing project, or a plug-in to it, release it\r\n    under the project's original license (and possibly other licenses).\r\n    This way, the software can be incorporated in the existing project,\r\n    saving time and money in support.\r\n-   **Consider anticipated uses.**  If it must work with other\r\n    components, or is anticipated to work with other components, ensure\r\n    that the license will permit those anticipated uses. In particular,\r\n    will it be directly linked with proprietary or classified code?\r\n-   **Make sure it's really OSS.**  Choose a license that has passed\r\n    legal reviews and is clearly accepted as an OSS license. Choose a\r\n    license that is recognized as an [Open Source Software license by\r\n    the Open Source Initiative\r\n    (OSI)](http://www.opensource.org/licenses/category), a [Free\r\n    Software license by the Free Software Foundation\r\n    (FSF)](http://www.gnu.org/licenses/license-list.html#SoftwareLicenses),\r\n    *and* is acceptable to widely-used Linux distributions (such as\r\n    being a [\"good\" license for\r\n    Fedora](http://fedoraproject.org/wiki/Licensing#Software_License_List))**.**\r\n-   **Use a widely-used existing license.**  Choose a widely-used\r\n    existing license; do *not* create a new license. This eliminates\r\n    future incompatibility and encourages future contributions by\r\n    others. [Bruce Perens noted back in\r\n    1999](http://www.oreilly.com/catalog/opensources/book/perens.html),\r\n    \"Do not write a new license if it is possible to use (a common\r\n    existing license)... The propagation of many different and\r\n    incompatible licenses works to the detriment of Open Source software\r\n    because fragments of one program cannot be used in another program\r\n    with an incompatible license.\" [Many view OSS license proliferation\r\n    as a\r\n    problem](http://news.cnet.com/Open-source-board-eyes-fewer-licenses/2100-7344_3-5578799.html);\r\n    [Serdar Yegulalp's 2008 \"Open Source Licensing Implosion\"\r\n    (InformationWeek)](http://www.informationweek.com/blog/main/archives/2008/08/the_open_source_2.html)\r\n    noted that not only are there too many OSS licenses, but that the\r\n    \"consequences for blithely creating new ones are finally becoming\r\n    concrete... the vast majority of open source products out there use\r\n    a small handful of licenses... Now that open source is becoming\r\n    (gasp) a mainstream phenomenon, using one of the less-common\r\n    licenses or coming up with one of your own works against you more\r\n    often than not\". As an aid, the [Open Source Initiative (OSI)\r\n    maintains a list of \"Licenses that are popular and widely used or\r\n    with strong\r\n    communities\"](http://www.opensource.org/licenses/category). Another\r\n    useful source is the list of [licenses accepted by the Google code\r\n    hosting\r\n    service](http://www.theregister.co.uk/2008/07/25/googlecode_bans_mpl/).\r\n    See the licenses listed in the FAQ question \"What are the major\r\n    types of open source software licenses?\".\r\n-   **Choose a GPL-compatible license.** The GNU General Public License\r\n    (GPL) is the most common OSS license; while you do not need to use\r\n    the GPL, it is often unwise to choose a license incompatible with\r\n    the majority of OSS. Thus, avoid releasing software under only the\r\n    original (\"4-clause\") BSD license (which has been replaced by the\r\n    \"new\" or \"revised\" 3-clause licence), the \"Academic Free License\"\r\n    (AFL), the now-abandoned \"Common Public License\" 1.0 (CPL), the\r\n    \"Open Software License\" (OSL), or the \"Mozilla Public License\r\n    version 1.1\" (MPL 1.1).\r\n-   **Choose a license that best meets your goals.** Choosing between\r\n    the various options - particularly between permissive, weakly\r\n    protective, and strongly protective options - is perhaps the most\r\n    difficult, because this selection depends on your goals, and there\r\n    are many opinions on which licenses are most appropriate for\r\n    different circumstances. A \"permissive\" license permits arbitrary\r\n    use of the program, including making proprietary versions of it. A\r\n    \"protective\" license \"protects\" the software from becoming\r\n    proprietary, and instead enforces a \"share and share alike\" approach\r\n    between parties. A \"weakly-protective\" license is a compromise\r\n    between the two, preventing the covered library from becoming\r\n    proprietary yet permitting it to be embedded in larger proprietary\r\n    works. If the goal is maximize the use of a technology or standard\r\n    in a variety of different applications/implementations, including\r\n    proprietary ones, permissive licenses may be especially useful. \r\n    However, if the goal is to encourage longevity and cost savings\r\n    through a commonly-maintained library or application, protective\r\n    licenses may have some advantages, because they encourage developers\r\n    to contribute their improvements back into a single common\r\n    project. In many cases, weakly protective licenses are used for\r\n    common libraries, while strongly protective licenses are used for\r\n    applications. Common licenses for each type are:\r\n    -   Permissive: MIT, BSD-new, Apache 2.0\r\n    -   Weakly protective: LGPL (version 2 or 3)\r\n    -   Strongly protective: GPL (version 2 or 3)\r\n\r\nLicenses that meet all the criteria above include the [MIT\r\nlicense](http://www.opensource.org/licenses/mit-license.php), [revised\r\nBSD license](http://www.opensource.org/licenses/bsd-license.php), the\r\n[Apache 2.0 license](http://www.opensource.org/licenses/apache2.0.php)\r\n(though Apache 2.0 is only compatible with GPL version 3 not GPL version\r\n2), the [GNU Lesser General Public License\r\n(LGPL)](http://www.opensource.org/licenses/lgpl-license.php) versions\r\n2.1 or 3, and the [GNU General Public License\r\n(GPL)](http://www.opensource.org/licenses/gpl-license.php) versions 2 or\r\n3.\r\n\r\nIn some cases, it may be wise to release software under multiple\r\nlicenses (e.g., \"LGPL version 2.1 and version 3\", \"GPL version 2 and\r\n3\"), so that users can then pick which license they will use. This can\r\nincrease the number of potential users.\r\n\r\n### Q: How should I create an open source software project?\r\n\r\nFirst, get approval to publicly release the software.  One way to deal\r\nwith potential export control issues is to make this request in the same\r\nway as approving public release of other data/documentation.\r\n\r\nIf it is an improvement to an existing project, release it to the main\r\nOSS project, in whatever format they prefer changes. Many prefer\r\n\"unified diff patches\", generated by \"diff -u\" or similar commands. Most\r\nprojects prefer to receive a set of smaller changes, so that they can\r\nreview each change for correctness.\r\n\r\nIf it is a new project, be sure to remove \"barriers to entry\" for others\r\nto contribute to the project:\r\n\r\n-   Use a common OSS license well-known to be OSS (GPL, LGPL, MIT/X,\r\n    BSD-new, Apache 2.0) – don’t write your own license\r\n-   Establish project website. Typically this will include source code\r\n    version management system, a mailing list, and an issue tracker.\r\n-   Document the project's purpose, scope, and major decisions - users\r\n    must be able to quickly determine if this project might meet their\r\n    needs.\r\n-   Use typical OSS infrastructure, tools, etc. Requiring the use of\r\n    very unusual development tools may impede development, unless those\r\n    tools provide a noticeable advantage.\r\n-   Maximize portability, and avoid requiring proprietary\r\n    languages/libraries unnecessarily. The more potential users, the\r\n    more potential developers.\r\n-   The released version *Must run*. Small-but-running is better than\r\n    big-and-not.\r\n-   Establish vetting process(es) before government will use updated\r\n    versions (testing, etc.)\r\n-   Determine if there will be a government-paid lead.\r\n\r\nSome documents that may help include:\r\n\r\n-   [\"Producing Open Source Software: How to Run a Successful Free\r\n    Software Project\" by Karl\r\n    Fogel](http://producingoss.com/en/index.html)\r\n-   [Open Technology Development (OTD): Lessons Learned & Best Practices\r\n    for Military\r\n    Software](http://cio-nii.defense.gov/sites/oss/OTD-lessons-learned-military-signed.pdf)\r\n-   [Free Software Project Management\r\n    HOWTO](http://tldp.org/HOWTO/Software-Proj-Mgmt-HOWTO/index.html)\r\n-   [Software Release Practice\r\n    HOWTO](http://tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html)\r\n-   [Recognizing and Avoiding Common Open Source Community\r\n    Pitfalls](http://michaeldehaan.net/2009/05/17/oss-pitfalls/)\r\n\r\n### Q: In what form should I release open source software?\r\n\r\nOSS should be released using conventional formats that make it easy to\r\ninstall (for end-users) and easy to update (for potential\r\nco-developers). These formats may, but need not, be the same.\r\n\r\nIf you are releasing OSS source code for Unix-like systems (including\r\nLinux and MacOS), you should follow the usual conventions for doing so\r\nas described below:\r\n\r\n-   [Releasing Free/Libre/Open Source Software (FLOSS) for Source\r\n    Installation](http://www.dwheeler.com/essays/releasing-floss-software.html)\r\n-   [GNU Coding Standards, especially on the release\r\n    process](http://www.gnu.org/prep/standards/html_node/Managing-Releases.html)\r\n-   [Software Release Practice\r\n    HOWTO](http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/)\r\n\r\n### Q: Where can I release open source software that are new projects to the public?\r\n\r\nYou may use existing industry OSS project hosting services such as\r\n[SourceForge](http://sourceforge.net/),\r\n[Savannah](http://savannah.gnu.org/), [Tigris](http://www.tigris.org/),\r\n[Google code](http://code.google.com/), [GitHub](https://github.com/),\r\n[Gitorious](http://gitorious.org/), [Apache Software\r\nFoundation](http://www.apache.org/) or [Microsoft\r\nCodePlex](http://www.codeplex.com/). [Wikipedia's \"Comparison of OSS\r\nhosting facilities\"\r\npage](http://en.wikipedia.org/wiki/Comparison_of_open_source_software_hosting_facilities)\r\nmay be helpful in identifying existing hosting facilities, as well as\r\nsome of their pros and cons. Each hosting service tends to be focused on\r\nparticular kinds of projects, so prefer a hosting service that\r\nwell-matches the project. Using industry OSS project hosting services\r\nmakes it easier to collaborate with other parties outside the U.S. DoD\r\nor U.S. government. The [Government Services Administration (GSA) has an\r\nagreement with\r\nSourceForge](https://apps.gov/cloud/advantage/cloud/sa_details.do?BV_UseBVCookie=Yes&clid=160&catId=66).\r\n\r\nDISA's [Forge.mil](https://www.forge.mil/) is \"a family of services\r\nprovided to support the DoD's technology development community. The\r\nsystem currently enables the collaborative development and use of open\r\nsource and DoD community source software. These initial software\r\ndevelopment capabilities are growing to support the full system\r\nlife-cycle and enable continuous collaboration among all stakeholders\r\nincluding developers, testers, certifiers, operators, and users.\" It\r\nuses a variant of the software used by SourceForge.\r\n\r\nIf the project is likely to become large, or must perform filtering for\r\npublic release, it may be better to establish its own website. Note that\r\nmany of the largest commercially-supported OSS projects have their own\r\nsites.\r\n\r\n### Q: Can the government or contractor use trademarks, service marks, and/or certification marks with OSS projects?\r\n\r\nYes, both the government and contractors may obtain and use trademarks,\r\nservice marks, and/or certification marks for software, including OSS.\r\nFor example, trademarks and certification marks can be used to\r\ndifferentiate one version of OSS from others, e.g., to designate certain\r\nreleases as an \"official\" version. Depending on your goals, a trademark,\r\nservice mark, or certification mark may be exactly what you need.\r\n\r\nAccording to the U.S. Patent and Trademark Office (PTO):\r\n\r\n-   A trademark is \"a word, phrase, symbol or design, or a combination\r\n    thereof, that identifies and distinguishes the source of the goods\r\n    of one party from those of others.\"\r\n-   A service mark is \"a word, phrase, symbol or design, or a\r\n    combination thereof, that identifies and distinguishes the source of\r\n    a service rather than goods. The term 'trademark' is often used to\r\n    refer to both trademarks and service marks.\r\n-   A certification mark is \"any word, phrase, symbol or design, or a\r\n    combination thereof owned by one party who certifies the goods and\r\n    services of others when they meet certain standards. The owner of\r\n    the mark exercises control over the use of the mark; however,\r\n    because the sole purpose of a certification mark is to indicate that\r\n    certain standards have been met, use of the mark is by others.\"\r\n\r\nFor more about trademarks, see the [U.S. Patent and Trademark Office\r\n(PTO) page \"Trademark\r\nbasics\"](http://www.uspto.gov/trademarks/basics/index.jsp). Note:\r\n\r\n-   You don't have to register a trademark to have a trademark. If you\r\n    claim rights to use a mark, \"you may simply use the 'TM' (trademark)\r\n    or 'SM' (service mark) designation to alert the public to your claim\r\n    of ownership of the mark\". However, there are advantages to\r\n    registering a trademark, especially for enforcement. There is a fee\r\n    for registering a trademark. You may only claim that a trademark is\r\n    registered if it is actually registered. For more information, see\r\n    the [U.S. Patent and Trademark Office (PTO) page \"Should I register\r\n    my mark?\"](http://www.uspto.gov/trademarks/basics/register.jsp)\r\n-   It can sometimes be a challenge to find a good name. Using a made-up\r\n    word that has no Google hits is often a good start, but again, see\r\n    the PTO site for more information.\r\n-   You *do* have to police the trademark's use, or you could lose it.\r\n\r\nOSS-like development approaches within the government\r\n-----------------------------------------------------\r\n\r\n### Q: What are \"Open Government Off-the-Shelf\" (OGOTS) or \"Government OSS\" (GOSS)?\r\n\r\nSoftware that is developed collaboratively by multiple organizations\r\nwithin the government and its contractors for government use, and\r\n*not* released to the public, is sometimes called \"Open Government\r\nOff-the-Shelf\" (OGOTS) or \"Government OSS\" (GOSS). Often there is a\r\nsingle integrating organization, while other organizations inside the\r\ngovernment submit proposed changes to the integrator. In some cases\r\naccess is limited to portions of the government instead of the entire\r\ngovernment.\r\n\r\nReasons for taking this approach vary. In some cases, there are\r\nnationally strategic reasons the software should not be released to the\r\npublic (e.g., it is classified). In some other cases, the government\r\nlacks the rights to release the software to the public, e.g., the\r\ngovernment may only have \"Government Purpose Rights\" (GPR).\r\n\r\nOGOTS/GOSS software is often not OSS; software is only OSS if it meets\r\nthe definition of OSS. For example, software that can only be used for\r\ngovernment purposes is not OSS, since it cannot be used for any purpose.\r\nHowever, sometimes OGOTS/GOSS software is later released as OSS. This\r\nmight occur, for example, if the government originally only had\r\nGovernment Purpose Rights (GPR), but later the government received\r\nunlimited rights and released the software as OSS.\r\n\r\nSome people like the term GOSS, because it indicates an intent to do\r\nOSS-like collaborative development, but within the government instead.\r\nOthers do not like the term GOSS, because GOSS is not actually OSS, and\r\nthey believe the term can be misleading. In either case, it is important\r\nto understand that GOSS is typically *not* OSS, though GOSS may be a\r\nstepping stone towards later OSS release. Since both terms are in use,\r\nthe rest of this document will use the term OGOTS/GOSS.\r\n\r\n### Q: Does the U.S. government sometimes use OSS-like development processes internally?\r\n\r\nYes. Examples of OGOTS/GOSS software include:\r\n\r\n-   Ozone Widget Framework (OWF) - a presentation-tier integration\r\n    framework enabling widgets (light-weight web applications) to\r\n    interact within a user's browser, and its companion project\r\n-   Ozone Marketplace (OMP) - provides an AppStore type of functionality\r\n    in which capabilities (widgets, as well as others) can be exposed in\r\n    a market for developers and end-users to discover.\r\n-   Older versions of Falconview (though it is now OSS).\r\n\r\nSome systems have been set up within the government to store or\r\ncollaboratively develop government-internal software. These include:\r\n\r\n-   [Forge.mil](http://www.forge.mil); see especially\r\n    [software.forge.mil](http://software.forge.mil). Note that although\r\n    they use the Open Source model, forge.mil is NOT open source.\r\n    Downloading requires acceptance of their license that bans use,\r\n    modification, reproduction, release, performance, or display for\r\n    commercial or non-governmental purposes.\r\n-   [Navy’s Software, Hardware Asset Reuse Enterprise\r\n    (SHARE)](https://acc.dau.mil/share)\r\n\r\n### What is Open Technology Development (OTD)? What is its relationship to OSS?\r\n\r\nOTD is an approach to software/system development in which developers\r\n(in multiple organizations) collaboratively develop and maintain\r\nsoftware or a system in a decentralized fashion. OTD depends on open\r\nstandards and interfaces, open source software and designs,\r\ncollaborative and distributed online tools, and technological agility.\r\n\r\nOTD includes *both* OSS and OGOTS/GOSS. An OTD project *might* be OSS,\r\nbut it also might not be (it might be OGOTS/GOSS instead). Even if an\r\nOTD project is not OSS itself, an OTD project will typically use,\r\nimprove, or create OSS components.\r\n\r\n### Are there guidance documents on OGOTS/GOSS?\r\n\r\nYes:\r\n\r\n-   [Open Technology Development Lessons\r\n    Learned](http://cio-nii.defense.gov/sites/oss/OTD-lessons-learned-military-signed.pdf)\r\n    includes discussions that apply to OGOTS/GOSS and OSS with\r\n    government involvement.\r\n-   [Office of the Director of National Intelligence (ODNI) Government\r\n    Open-Source Software (GOSS) “Handbook for\r\n    Govies”](http://mil-oss.org/resources/goss-govies_v1.7_29jun2011_released.pdf)\r\n    includes guidance specific to OGOTS/GOSS.\r\n\r\nOther sources of information on OSS\r\n-----------------------------------\r\n\r\n### Q: What additional material is available on OSS in the government or DoD?\r\n\r\nThe [Free Open Source Software (FOSS) Community of Interest (COI) site\r\nat\r\n<http://cio-nii.defense.gov/sites/oss/>](http://cio-nii.defense.gov/sites/oss/)\r\nhas relevant information, including this FAQ and:\r\n\r\n-   *Clarifying Guidance Regarding Open Source Software (OSS)*\r\n    Memorandum by David M. Wennergren, 16 October 2009\r\n-   *Open Technology Development (OTD): Lessons Learned & Best Practices\r\n    for Military Software*, OSD Report, May 2011\r\n-   *Use of Free and Open-Source Software (FOSS) in the U.S. Department\r\n    of Defense*, a 2003 study by MITRE Corporation performed for DoD\r\n\r\nOther documents that you may find useful include:\r\n\r\n-   [*Frequently Asked Questions About Copyright and Computer Software -\r\n    Issues affecting the U.S. Government with Special Emphasis on Open\r\n    Source Software*](http://www.cendi.gov/publications/index.html),\r\n    CENDI (cendi.gov).\r\n-   [*Government Computer Software Acquisition and The GNU General\r\n    Public\r\n    License*](https://acc.dau.mil/CommunityBrowser.aspx?id=475584&lang=en-US)\r\n    by B. Scott Michel (Lt. Cmdr., PhD, USN(RC)), Eben Moglen (Software\r\n    Freedom Law Center), Mishi Choudhary (Software Freedom Law Center),\r\n    and Dorothy Becker (Navy OGC, SPD Patent Counsel), October 1, 2011.\r\n\r\n### Q: Where do OSS developers congregate and what conferences should I go to?\r\n\r\nThe DoD does not endorse any specific event or conference. That said,\r\nthere are conferences and organizations specifically focused on OSS in\r\nthe government or military context, at which DoD personnel have\r\npresented information on DoD policy and OSS. For example:\r\n\r\n-   The [Military Open Source Software\r\n    (Mil-OSS)](http://www.mil-oss.org/) was established to \"connect and\r\n    empower an active community of civilian and military open source\r\n    software and hardware developers across the U.S.\". It has hosted at\r\n    least three conferences: August 2009 (Atlanta, GA), August 2010\r\n    (Washington, DC), and August/September 2011 (Atlanta, GA).\r\n-   The Government Open Source Conference ([GOSCON](http://goscon.org/))\r\n    has been held on November 2009 and August 2011 in Washington, DC.\r\n\r\nYou may also find the external [Military - Open Source Software\r\n(MIL-OSS) DoD/IC discussion\r\nlist](http://groups.google.com/group/mil-oss?hl=en) useful.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}